{=================================================================\
|                          Edgeville Dougher                      |
|                              by Lama                            |
|=================================================================|
|                                                                 |
|   Author: Lama                                                  |
|   Description: Turn flour into dough for a profit in Edgeville  |
|   Contact: Private message @ SRL Forums! :)                     |
|                                                                 |
|                       CURRENT VERSION: 1.1                      |
|                      LAST UPDATED:  10/7/14                     |
\_________________________________________________________________}

{============================ USER SETUP =========================)

 1. Place character in Edgeville Bank
 2. Setup whichever preset to have 14 pots of flour per inventory
 3. Hit RUN
 4. Fill out information, check desired boxes
 5. Hit 'Start Script'

 6. (Optional) Study for classes, go to work, sleep

(=============================== STOP =============================)

program LamaDougher;

{$DEFINE SMART}
{$i srl-6/srl.simba}
{$I SPS/lib/SPS-RS3.Simba}
{$i srl-6/lib/misc/srlplayerform.simba}

const

{ Script Info }
  SCRIPT = 'LamaDougher';
  VERSION = 'v1.1';

{ Player Form }
  P_PRESET = 2;

// Global Variables

var
  flourDTM, antibanCount: integer;
  loadsDone, loadsToDo, profit, profitPerHour, profitMade, PaintBitmap: integer;
  flourPrice, doughPrice: integer;
  oriented: boolean;
  pathWell, pathBank, pathLodeBank: TPointArray;

// Load DTMs
procedure loadDTM();
begin
  flourDTM :=  DTMFromString('mlwAAAHicY2dgYGhiYmCoAOJSKA3i9wFxDxBHMjIw+DFC6EQgTgHiOKhYaZAxUDcTVszKgBsw4sFQAABKcQcj');
end;

// Free DTMs
procedure freeTheDTMs();
begin
  freeDTM(flourDTM);
end;

// Sets up the UI for things
procedure initPlayerForm();
begin
  with playerForm do
  begin
    name := 'Lama''s Dougher'; // the title of the SPF, usually the name of your script
    scriptHelpThread := '';    // a link to a help thread, if set to '' will link to my setup guide

    editBoxLabels := ['Loads to Do'];     // edit boxes are created for each array element
    editBoxDefaults := ['0'];             // optional default values for each edit box; array length must equal editBoxLabel length

    // optional hints for each edit box; hints are shown when the user holds the mouse over the component
    editBoxHints := ['How many inventories of dough to make?'];

    checkBoxLabels := ['Save SRL log', 'Debug/Paint Status', 'Debug SMART', 'Text Progress Report']; // same as editBoxLabels but for check boxes
    checkBoxDefaults := ['true', 'false', 'false', 'false'];
    checkBoxHints := ['Do you want to save SRL debug to a log file (recommended)?', 'Want to see what the script is thinking?', 'Want to see colorful boxes on SMART?', 'Output the progress report to the debug box?'];

    comboBoxLabels := ['Bank Preset'];
    comboBoxDefaults := ['1'];
    comboBoxHints := ['Use which of your bank presets?'];

    // this needs to be done for every element in the comboBoxLabels array
    setLength(comboBoxItems, length(comboBoxLabels));
    comboBoxItems[0] := ['1', '2'];

  end;
end;

procedure declarePlayers();
var
  i: integer;
begin
  players.setup(playerForm.playerNames, playerForm.playerFile); // load the SPF players from the SRL Player Manager
  currentPlayer := 0;                // player to use first

  // set player attributes based on the settings from the form
  for i := 0 to high(players) do
    with players[i] do
    begin
      // convert the integers
      integers[0] := strToInt(playerForm.players[i].settings[0]);  // Loads to Do

      // booleans
      booleans[0] := strToBool(playerForm.players[i].settings[1]); // Save SRL Log
      booleans[1] := strToBool(playerForm.players[i].settings[2]); // Debug/Paint Status
      booleans[2] := strToBool(playerForm.players[i].settings[3]); // Debug SMART
      booleans[3] := strToBool(playerForm.players[i].settings[4]); // Debug Report

      case playerForm.players[i].settings[5] of                    // Bank Preset
        '1': integers[P_PRESET] := BANK_BUTTON_PRESET_1;
        '2': integers[P_PRESET] := BANK_BUTTON_PRESET_2;
      end;

      // any other data types you've decided to use
    end;
end;

{------------------------------------------------------------------------------)
 Procedure: paintStatus
 Description: Paints the current script status on SMART.
 Credits: The Mayor
(------------------------------------------------------------------------------}

procedure paintStatus(status: string);
begin
  if players[currentPlayer].booleans[1] then
  begin

    try
      smartImage.clearArea(intToBox(chatbox.x2-320,chatbox.y2-19, chatBox.x2, chatBox.y2));
    except
    end;

    smartImage.drawText('Status: ' + status, point(chatbox.x2-320,chatbox.y2-19), smallChars, false, clRed);
  end;
end;

{------------------------------------------------------------------------------)
 Procedure: checkForImages
 Description: Downloads the SPS map and/or paint picture if you don't have them.
 Credits: Kevin, Modified by The Mayor
(------------------------------------------------------------------------------}

procedure checkForImages(path, link, item: string);
var
  progFile: longInt;
  picName: string;

begin
  picName := AppPath + path;

  try
    if not fileExists(picName) then
    begin
      writeLn('NOTIFICATION: ' + item + ' does not exist - Downloading it now!.');
      progFile := createFile(picName);
    end else
      exit;

    closeFile(progFile);

    progFile := rewriteFile(picName, false);
    writeFileString(progFile, getPage(link));
    writeLn('NOTIFICATION: ' + item + ' has been download to Simba folder!');
    writeLn('');
  finally
    if (progFile > 0) then
      closeFile(progFile);
  end;
end;

{ ------------------------------------- )
 Function: getGEPrice
 Description: Gets prices off the wikia
 Credits: The Mayor
( ------------------------------------- }

function getGEPrice(itemString: String): Integer;
var
  wikiaPage, priceString: string;

begin
  wikiaPage := getPage('http://runescape.wikia.com/wiki/Exchange:' + itemString);
  priceString := between('GEPrice">', '</span>', wikiaPage);
  result := strToIntDef(extractFromStr(priceString, numbers), -1);
  writeLn('-- ' + itemString + ' price: ' + toStr(result));
end;

{------------------------------------------------------------------------------)
 Function: perHour
 Description: Converts an integer to a 'per hour' amount.
 Credits: Coh3n
(------------------------------------------------------------------------------}

function perHour(amt, time: integer): integer;
begin
  if (amt = -1) then
  begin
    result := -1;
    exit;
  end;

  try
    result := round((amt * 60) / (time / 60000));
  except
  end;
end;

{------------------------------------------------------------------------------)
 Procedure: getPrices
 Description: Finds prices of the items through getGEPrice function
(------------------------------------------------------------------------------}

procedure getPrices();
begin
  writeLn('Getting prices ...');
  flourPrice := getGEPrice('Pot_of_flour');
  doughPrice := getGEPrice('Pastry_dough');
  writeLn('');
end;

{------------------------------------------------------------------------------)
 Function: progressReport
 Description: Paints progress on SMART w/ fancy image
(------------------------------------------------------------------------------}

procedure smartReport();
begin
  profit := (((doughPrice - flourPrice) * 14) * loadsDone);

  smartImage.drawText((msToTime(getTimeRunning, TIME_ABBREV)), Point(413, 442), UpCharsEx, false, clWhite); // Draw time running
  smartImage.drawText(toString(loadsDone) + '/' + (toStr(players[currentPlayer].integers[0])) + ' loads', Point(413, 481), UpCharsEx, false, 1268443); // Draw how many loads completed
  smartImage.drawText(toString(profit) + ' (' + (toStr((perHour(profit, getTimeRunning())))) + ' P/H)', Point(413, 520), UpCharsEx, false, clYellow);  // Draw profit and profit per hour
end;

procedure debugReport();
begin
  clearDebug();

  writeLn('|=====================================|');
  writeLn('             ' + SCRIPT + ' ' + VERSION + '         ');
  writeLn('                                      ');
  writeLn('  Time Running: ' + (msToTime(getTimeRunning, TIME_ABBREV)));
  writeLn('  Loads Done  : ' + toStr(loadsDone) + '/' + (toStr(playerForm.players[currentPlayer].settings[0])) + ' loads');
  writeLn('  Total Profit: ' + toStr(profit) + ' (' + (toStr((perHour(profit, getTimeRunning())))) + ' P/H)');
  writeLn('                                       ');
  writeLn('|=====================================|');
end;

procedure overallReport();
begin
  smartReport();
  if players[currentPlayer].booleans[3] then
    debugReport();
end;

procedure loadSPSPath();
begin
  pathWell := [Point(186, 125), Point(142, 90)];
  pathBank := [Point(139, 90), Point(186, 124)];
  pathLodeBank := [Point(64, 65), Point(115, 87), Point(148, 127), Point(187, 125)];
  SPS.setup('EDGEFOUNTAIN_0', RUNESCAPE_SURFACE);
end;

{----------------------------------------------------------------------------------)
 Function: antiban
 Description: Significantly lowers chance of ban through reproduced human qualities
(----------------------------------------------------------------------------------}

procedure antiban();
begin

  case(random(1000) + 1) of

    1..30:
    begin
      mouseOffClient(OFF_CLIENT_RANDOM);
      if players[currentPlayer].booleans[1] then
        writeLn('Antibanning ...');
    end;
    31..50:
    begin
      sleepAndMoveMouse(1000 + random(2000));
      if players[currentPlayer].booleans[1] then
        writeLn('Antibanning ...');
    end;
    51..70:
    begin
      hoverSkill(SKILL_COOKING);
      if players[currentPlayer].booleans[1] then
        writeLn('Antibanning ...');
    end;
    71..85:
    begin
      pickUpMouse();
      if players[currentPlayer].booleans[1] then
        writeLn('Antibanning ...');
    end;
    86..110:
    begin
      smallRandomMouse();
      if players[currentPlayer].booleans[1] then
        writeLn('Antibanning ...');
    end;
    111..130:
    begin
      randomCameraAngle(MS_ANGLE_HIGH);
      if players[currentPlayer].booleans[1] then
        writeLn('Antibanning ...');
    end;
    131..145:
    begin
      mouseMovingObject();
      if players[currentPlayer].booleans[1] then
        writeLn('Antibanning ...');
    end;
    146..155:
    begin
      wait(randomRange(3000, 6500) + random(1000));
      randomRClickItem();
      if players[currentPlayer].booleans[1] then
        writeLn('Antibanning ...');
    end;
  end;

end;

{------------------------------------------------------------)
 Procedure: orientPlayer
 Description: Sets up angles, zoom... orientation
(------------------------------------------------------------}

procedure orientPlayer();
begin
  if players[currentPlayer].booleans[1] then
  begin
    writeLn('Orienting player ...');
  end;

  try
    paintStatus('Orienting player ...');
  except
  end;

  minimap.clickCompass();
  mainScreen.setAngle(MS_ANGLE_HIGH);
  mainscreen.setZoom(true);
  tabBackPack.open();

  exitTreasure();
  closeAdWindow();

  oriented := true;
end;

{------------------------------------------------------------------------------)
 Function: isFlourBackpack
 Description: Determines if inventory contains pots of flour.
 Credit: The Mayor (modified by Lama)
(------------------------------------------------------------------------------}

function isFlourBackpack(): boolean;
var
  x, y: integer;

begin
  if not gameTabs.openTab(TAB_BACKPACK) then
    exit;
  result := findDTM(flourDTM, x, y, tabBackpack.getBounds());

  if result then print('Flour found in backpack');
end;

{------------------------------------------------------------------------------)
 Function: walkToFountain
 Description: Walks to the fountain (from bank)
(------------------------------------------------------------------------------}

procedure walkToWell();
begin
  if players[currentPlayer].booleans[1] then
    writeLn('Walking to well ...');

  paintStatus('Walking to well ...');

  if SPS.walkPath(pathWell) and (isFlourBackpack()) then
      minimap.waitPlayerMoving();
end;

function packFull(): boolean;
begin
  result := tabBackpack.isFull;
end;

{------------------------------------------------------------------------------)
 Function: useFlour
 Description: Uses the flour on the fountain (begins doughing)
(------------------------------------------------------------------------------}

procedure useFlour();
var
  x, y, i: integer;
  TPA, mixTPA: TPointArray;
  ATPA: T2DPointArray;
  mix: TBox;
  p: TPoint;

  // Failsafe variable
  o: integer;

begin
  minimap.waitPlayerMoving();

  if players[currentPlayer].booleans[1] then
    writeLn('Using flour on the well ...');

  paintStatus('Using flour on the well ...');

  // Click pot of flour in inventory
  tabBackpack.mouseSlot((random(1) + 2), MOUSE_MOVE);
  fastClick(MOUSE_LEFT);

  // Simple failsafe
  for o := 0 to 5 do
  begin
    if not tabBackPack.isOpen then
    begin
      tabBackPack.open();
      tabBackpack.mouseSlot((random(1) + 2), MOUSE_MOVE);
      fastClick(MOUSE_LEFT);
    end else
      break;
  end;

  // Find well colors
  findColorsSpiralTolerance(x, y, TPA, 3563123, mainScreen.getBounds(), 15, colorSetting(2, 0.08, 1.57));
  mainScreen.filterPointsPlayer(TPA);

  // Makes smaller box selections (multiple) around color matches of TPA
  ATPA := TPA.toATPA(30, 30);
  // Sorts by closest match, which should be the well
  ATPA.sortFromMidPoint(mainscreen.playerPoint);

  // Debug matches for the Well
  if players[currentPlayer].booleans[2] then
    smartImage.debugATPA(ATPA);

  // Clicks on the well
  for i := 0 to 6 do
  begin
    mouse(middleTPA(ATPA[i]), MOUSE_MOVE);
    if isMouseOverText(['ell'], 500) then
    begin
      fastClick(MOUSE_LEFT);
      break;
    end;
  end;

  if i > 5 then
  begin
    if (minimap.findSymbol(p, MM_SYMBOL_BANK, minimap.getBounds())) then
    begin
      writeLn('Found bank symbol!');
      mouse(p, MOUSE_LEFT);
      wait(500 + random(500));
      minimap.waitPlayerMoving();
    end;
  end;


  // Starts making dough
  if productionScreen.isOpen(5000) then

  mix := intToBox(285, 325, 509, 353);
  mixTPA := mix.createTPA;

  if players[currentPlayer].booleans[2] then
    smartImage.debugTPA(mixTPA, false);

  mouseBox(mix, MOUSE_MOVE);
  wait(randomRange(250, 500));
  fastClick(MOUSE_LEFT);

  if players[currentPlayer].booleans[2] then
    smartImage.clearArea(intToBox(0, 0, 750, 395));

end;

{------------------------------------------------------------------------------)
 Function: waitDoughing
 Description: Waits for useFlour to finish up (signaled by a full inventory)
(------------------------------------------------------------------------------}

procedure waitDoughing();
begin
  if players[currentPlayer].booleans[1] then
    writeLn('Waiting for dough to be made ...');

  paintStatus('Waiting for dough to be made ...');

  waitFunc(@(packFull), 50, 20000)
end;

{------------------------------------------------------------------------------)
 Function: walkToBank
 Description: Walks back to the bank (from fountain)
(------------------------------------------------------------------------------}

procedure walkToBank();
begin
  if players[currentPlayer].booleans[2] then
    writeLn('Walking back to bank ...');

  paintStatus('Walking back to bank ...');

  if SPS.walkPath(pathBank) and tabBackpack.isFull then
    minimap.waitPlayerMoving();
end;

{------------------------------------------------------------------------------------------)
 Procedure: clickBankFailsafe
 Description: In case the array failsafe fails, and it gets fooled by some blueish clothing
(------------------------------------------------------------------------------------------}

procedure clickBankFailsafe();
var
  p: TPoint;
begin
  writeLn('Still no banker found, attempting reset...');
  paintStatus('Still no banker found, attempting reset...');
  if (minimap.findSymbol(p, MM_SYMBOL_BANK, minimap.getBounds())) then
  begin
    writeLn('Found bank symbol!');
    mouse(p, MOUSE_LEFT);
    wait(500 + random(500));
    minimap.setAngle(MM_DIRECTION_WEST);
    minimap.waitPlayerMoving();
  end;
end;

procedure lastResort();
begin
  writeLn('Banker not found again, teleporting to lodestone');
  paintStatus('Banker not found again, teleporting to lodestone');
  lodestoneScreen.teleportTo(LOCATION_PREVIOUS);
  if random(4) <> 0 then
    sleepAndMoveMouse(5000 + random(2000));
  wait(randomRange(8000, 11500));
  sleepAndMoveMouse(3000 + random(2000));

  SPS.walkPath(pathLodeBank);
  minimap.waitPlayerMoving();
end;

function bankOpen(): boolean;
begin
  if bankScreen.isOpen then
    result := true;
end;

{------------------------------------------------------------)
 Function: isFlourBank
 Description: Checks if there is any flour left in the bank
 Credits: The Mayor taught me this, Thanks!
(------------------------------------------------------------}

function isFlourBank(): boolean;
var
  x, y: integer;

begin
  if not bankOpen() then
    exit;
  result := findDTM(flourDTM, x, y, bankScreen.getBounds());

  if result then print('Flour found in bank');
end;

procedure doBanking();
var
  x, y, i, q: integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  failsafe: boolean;

begin
  if players[currentPlayer].booleans[1] then
    writeLn('Banking ...');

  paintStatus('Banking ...');

  // Find banker colors
  findColorsSpiralTolerance(x, y, TPA, 6041158, mainScreen.getBounds(), 11, colorSetting(2, 0.42, 0.69));
  mainScreen.filterPointsPlayer(TPA);

  // Find banker failsafe
  if length(TPA) < 1 then
  begin
    if players[currentPlayer].booleans[1] then
    begin
      writeLn('Banker not found, trying again ...');
      paintStatus('Banker not found, trying again ...');
    end;
    minimap.clickCompass();
    minimap.setAngle(MM_DIRECTION_WEST);
    findColorsSpiralTolerance(x, y, TPA, 6041158, mainScreen.getBounds(), 11, colorSetting(2, 0.42, 0.69));
    mainScreen.filterPointsPlayer(TPA);
    if length(TPA) < 1 then
    begin
      clickBankFailsafe();
      findColorsSpiralTolerance(x, y, TPA, 6041158, mainScreen.getBounds(), 11, colorSetting(2, 0.42, 0.69));
      mainScreen.filterPointsPlayer(TPA);
      if length(TPA) < 1 then
       lastResort();
    end;
    failsafe := true;
  end;

  // Makes smaller box selections (multiple) around banker colors of TPA
  ATPA := TPA.toATPA(30, 30);
  // Sorts banker arrays by closest to player first, using ATPA
  ATPA.sortFromMidPoint(mainscreen.playerPoint);

  // Draw boxes around each banker on smart
  if players[currentPlayer].booleans[2] then
    smartImage.debugATPA(ATPA);


  // Clicks on closest banker
  for i := 0 to high(ATPA) do
  begin
    mouse(middleTPA(ATPA[i]), MOUSE_MOVE);
    if isMouseOverText(['anker'], 500) then
    begin
      fastClick(MOUSE_LEFT);
      if failsafe then
      begin
        minimap.clickCompass();
        mainscreen.setAngle(MS_ANGLE_HIGH);
        failsafe := false;
      end;
      waitFunc(@bankOpen, 50, 5000);
      break;
    end;

    // Failsafe measures if not finding mouseOverText
    for q = 0 to 5 do
    begin
      if not isMouseOverText(['anker'], 500) then
      begin
        clickBankFailsafe();
        mouse(middleTPA(ATPA[i]), MOUSE_MOVE);
        if isMouseOverText(['anker'], 500) then
        begin
          fastClick(MOUSE_LEFT);
          if failsafe then
          begin
            minimap.clickCompass();
            mainScreen.setAngle(MS_ANGLE_HIGH);
            failsafe := false;
          end;
          waitFunc(@bankOpen, 50, 5000);
          break;
        end;
      end;
    end;
  end;

  if players[currentPlayer].booleans[2] then
    smartImage.clearArea(intToBox(1, 1, 750, 395));

  // Uses preset 1 if the loadsToDo setting is not yet met
  if loadsDone < (players[currentPlayer].integers[0]) then
    bankScreen.clickButton(players[currentPlayer].integers[P_PRESET]);

  // Deposits the final inventory if the loadsToDo setting is met
  if loadsDone >= (players[currentPlayer].integers[0]) or (not isFlourBank()) then
    bankScreen.quickDeposit(QUICK_DEPOSIT_INVENTORY);

end;

procedure signature();
begin

  writeLn('.____                            _________            .__        __          ');
  wait(125);
  writeLn('|    |   _____    _____ _____   /   _____/ ___________|__|______/  |_  ______');
  wait(125);
  writeLn('|    |   \__  \  /     \\__  \  \_____  \_/ ___\_  __ \  \____ \   __\/  ___/');
  wait(125);
  writeLn('|    |___ / __ \|  Y Y  \/ __ \_/        \  \___|  | \/  |  |_> >  |  \___ \ ');
  wait(125);
  writeLn('|_______ (____  /__|_|  (____  /_______  /\___  >__|  |__|   __/|__| /____  >');
  wait(125);
  writeLn('        \/    \/      \/     \/        \/     \/         |__|             \/ ');
  wait(125);
  writeLn('');
  writeLn('                         Script: ' + SCRIPT + ' ' + VERSION);
  wait(500);
  writeLn('');
  writeLn('                         Loading, please wait ...');
  writeLn('');

end;

procedure terminate();
begin
  writeLn('');
  freeTheDTMs();
  debugReport();
end;

procedure mainLoop();
begin
  smartImage.drawBitmap(PaintBitmap, (point(4,426)));
  loadsDone := 0;

  profitMade := 0;

  overallReport();
  orientPlayer();

  repeat
    doBanking();
    walkToWell();
    useFlour();
    antiban();
    waitDoughing();
    walkToBank();
    loadsDone := loadsDone + 1;
    if loadsDone >= (players[currentPlayer].integers[0]) then
      doBanking();

    smartImage.clearArea(IntToBox(4, 426, 572, 577));
    smartImage.drawBitmap(PaintBitmap, (point(4,426)));
    overallReport();
  until(not players[currentPlayer].isActive) or loadsDone >= (players[currentPlayer].integers[0]) or (not isFlourBank());

  if loadsDone >= (players[currentPlayer].integers[0]) then
    writeLn('Load goal completed, exiting out to lobby ...');

  if (not isFlourBank()) then
    writeLn('Ran out of flour, exiting out to lobby ...');

  paintStatus('Load goal completed, exiting out to lobby ...');
  debugReport();

  players[currentPlayer].exitToLobby();

end;

begin
  clearDebug();
  signature();

  addOnTerminate('terminate');

  smartShowConsole := false;
  smartEnableDrawing := true;
  disableSRLDebug := true;
  disguise('LamaDougher');
  setupSRL();

  writeLn('');

  initPlayerForm();
  runPlayerForm();

  if (not playerForm.isScriptReady) then
    exit;

  declarePlayers();
  checkForImages('Includes\SPS\img\runescape_surface\EDGEFOUNTAIN_0.png', 'https://i.imgur.com/ATqCL5p.png', 'SPS map');
  checkForImages('Scripts\lamascripts\doughpaint.png', 'https://i.imgur.com/iOvGhCY.png', 'Paint image');

  PaintBitmap := loadBitmap(appPath + '\Scripts\lamascripts\doughpaint.png');

  loadDTM();
  loadSPSPath();

  getPrices();

  mainLoop();
end.
