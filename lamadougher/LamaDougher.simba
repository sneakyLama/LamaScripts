{=================================================================\
|                         Edgeville Dougher                       |
|                              by Lama                            |
|=================================================================|
|                                                                 |
|   Author: Lama                                                  |
|   Description: Turn flour into dough for a profit in Edgeville  |
|   Contact: Private message @ SRL Forums! :)                     |
\_________________________________________________________________}

program LamaDougher;

{$DEFINE SMART}
{$i srl-6/srl.simba}
{$I SPS/lib/SPS-RS3.Simba}
{$i srl-6/lib/misc/srlplayerform.simba}

const

{********************** USER SETUP ******************}

DEBUG = true; // Set to false to hide script thinking

{************************* STOP *********************}

SCRIPT = 'LamaDougher';
VERSION = '0.2';

// Global Variables

var
  potFlourDTM, waterDTM, antibanCount: integer;
  loadsDone, profit, profitPerHour, profitMade: integer;
  flourPrice, doughPrice: integer;
  oriented: boolean;
  pathWell, pathBank: TPointArray;

// Load DTMs
procedure loadDTM();
begin
  potFlourDTM := DTMFromString('mbQAAAHicY2VgYAhjYmBIBeJQIPZhgvD9GRkYgoE4BYiDgNgDiB/euA5UzYSCWRkwASMWDAYA0PMGCQ==');
  waterDTM :=  DTMFromString('mbQAAAHicY2VgYFjNxMCwEYiXMEHYIBwLFI8H4hggDgXiJCDOvvGKoa+pnWFiSzvD7P5+BnNjIwZsgBELBgMAkPwM7w==');
  addOnTerminate('freeTheDTMS');
end;

// Free DTMs
procedure freeTheDTMS();
begin
  freeDTM(potFlourDTM);
  freeDTM(waterDTM);
end;


{------------------------------------------------------------)
 Function: checkForSPSMap
 Description: Downloads the SPS map if you don't have it.
 Credits: Kevin
(------------------------------------------------------------}


procedure checkForSPSMap();
var
  progFile: longInt;
  picName: string;

begin
  picName := AppPath + 'Includes/SPS/img/runescape_surface/EDGEFOUNTAIN_0.png';

  try
    if not fileExists(picName) then
    begin
      writeLn('NOTIFICATION: SPS map does not exist - Downloading it now!');
      progFile := createFile(picName);
    end else
      exit;
    closeFile(progFile);

    progFile := rewriteFile(picName, false);
    writeFileString(progFile, getPage('https://i.imgur.com/m2ECJDh.png'));
    writeLn('NOTIFICATION: SPS map has been download to SPS folder!');
  finally
    if (progFile > 0) then
      closeFile(progFile);
  end;
end;

{ ------------------------------------- )
 Function: getGEPrice
 Description: Gets prices off the wikia
 Credits: The Mayor
( ------------------------------------- }

function getGEPrice(itemString: String): Integer;
var
  wikiaPage, priceString: string;

begin
  wikiaPage := getPage('http://runescape.wikia.com/wiki/Exchange:' + itemString);
  priceString := between('GEPrice">', '</span>', wikiaPage);
  result := strToIntDef(extractFromStr(priceString, numbers), -1);
  writeLn('-- ' + itemString + ' price: ' + toStr(result));
end;

{------------------------------------------------------------------------------)
 Function: perHour
 Description: Converts an integer to a 'per hour' amount.
 Credits: Coh3n
(------------------------------------------------------------------------------}

function perHour(amt, time: integer): integer;
begin
  if (amt = -1) then
  begin
    result := -1;
    exit;
  end;

  try
    result := round((amt * 60) / (time / 60000));
  except
  end;
end;

{------------------------------------------------------------------------------)
 Procedure: getPrices
 Description: Finds prices of the items through getGEPrice function
(------------------------------------------------------------------------------}

procedure getPrices();
begin
  writeLn('Getting prices ...');
  flourPrice := getGEPrice('Pot_of_flour');
  doughPrice := getGEPrice('Pastry_dough');
  profit := doughPrice - flourPrice;
  writeLn('');
  writeLn('-- PROFIT: ' + toStr(profit));
  writeLn('');
end;


{------------------------------------------------------------------------------)
 Function: progressReport
 Description: Paints progress on SMART w/ fancy image
 Inspiration: Spaceblow
(------------------------------------------------------------------------------}

procedure progressReport();
var
  proggyImageLocation: string;

begin

  profit := (((doughPrice - flourPrice) * 14) * loadsDone);
  profitMade := profitMade + profit;

  proggyImageLocation := 'C:\Simba\Scripts\lamascripts\edgevilledougher\dougherproggy.bmp'; // Makes things a little easier

  smartImage.clearArea(IntToBox(1, 338, 569, 597));
  smartImage.drawBitmap(proggyImageLocation, point(0,338)); // Paint proggy image

  smartImage.drawText(timeRunning, Point(340, 380), UpCharsEx, false, clWhite); // Draw time running
  smartImage.drawText(toString(loadsDone) + ' loads', Point(340, 438), UpCharsEx, false, 1268443); // Draw how many loads completed
  smartImage.drawText(toString(profit) + ' (' + (toStr((perHour(profitMade, getTimeRunning())))) + ' P/H)', Point(340, 495), UpCharsEx, false, clYellow); // Draw profit and profit per hour
end;

procedure loadSPSPath();
begin
  pathWell := [Point(98, 80), Point(53, 50)];
  pathBank := [Point(54, 49), Point(110, 108)];
  SPS.setup('EDGEFOUNTAIN_0', RUNESCAPE_SURFACE);
end;

{----------------------------------------------------------------------------------)
 Function: antiban
 Description: Significantly lowers chance of ban through reproduced human qualities
(----------------------------------------------------------------------------------}

procedure antiban();
begin
  if DEBUG then
    writeLn('Antibanning ...');

  case(random(1000) + 1) of

    1..12:
    begin
      mouseOffClient(OFF_CLIENT_RANDOM);
    end;
    13..25:
    begin
      sleepAndMoveMouse(1000 + random(2000));
    end;
    25..32:
    begin
      hoverSkill(SKILL_COOKING);
    end;
    32..45:
    begin
      pickUpMouse();
    end;
    46..60:
    begin
      smallRandomMouse();
    end;
    61..70:
    begin
      randomCameraAngle(MS_ANGLE_HIGH);
    end;
  end;

end;

{------------------------------------------------------------)
 Procedure: orientPlayer
 Description:Makes sure everything is good to go
(------------------------------------------------------------}

procedure orientPlayer();
begin
  if DEBUG then
    writeLn('Orienting player ...');

  minimap.clickCompass();
  mainScreen.setAngle(MS_ANGLE_HIGH);
  tabBackPack.open();

  exitTreasure();
  closeAdWindow();

  oriented := true;
end;

{------------------------------------------------------------------------------)
 Function: isFlourBackpack
 Description: Determines if inventory contains pots of flour.
 Credit: The Mayor (modified by Lama)
(------------------------------------------------------------------------------}

function isFlourBackpack(): boolean;
var
  x, y: integer;

begin
  if not gameTabs.openTab(TAB_BACKPACK) then
    exit;
  result := findDTM(potFlourDTM, x, y, tabBackpack.getBounds());

  if result and (DEBUG) then print('Flour found in backpack');
end;

{------------------------------------------------------------------------------)
 Function: walkToFountain
 Description: Walks to the fountain (from bank)
(------------------------------------------------------------------------------}

procedure walkToWell();
begin
  if DEBUG then
    writeLn('Walking to well ...')

  if SPS.walkPath(pathWell) then
    minimap.waitPlayerMoving()
end;

function packFull(): boolean;
begin
  result := tabBackpack.isFull;
end;

{------------------------------------------------------------------------------)
 Function: useFlour
 Description: Uses the flour on the fountain (begins doughing)
(------------------------------------------------------------------------------}

procedure useFlour();
var
  x, y, i: integer;
  TPA, mixTPA: TPointArray;
  ATPA: T2DPointArray;
  mix: TBox;

begin
  if DEBUG then
    writeLn('Using flour on well...');

  // Click pot of flour in inventory
  tabBackpack.mouseSlot(2, MOUSE_MOVE);
  fastClick(MOUSE_LEFT);

  // Simple failsafe
  if not tabBackPack.isOpen then
  begin
    tabBackPack.open();
    tabBackpack.mouseSlot(2, MOUSE_MOVE);
    fastClick(MOUSE_LEFT);
  end;

  // Find well colors
  findColorsSpiralTolerance(x, y, TPA, 3563123, mainScreen.getBounds(), 15, colorSetting(2, 0.08, 1.57));
  // Makes smaller box selections (multiple) around color matches of TPA
  ATPA := TPA.toATPA(30, 30);
  // Sorts by closest match, which should be the well
  ATPA.sortFromMidPoint(mainscreen.playerPoint);

  smartImage.debugATPA(ATPA);

  // Clicks on the well
  for i := 0 to high(ATPA) do
  begin
    mouse(middleTPA(ATPA[i+1]), MOUSE_MOVE);
    if isMouseOverText(['ell'], 500) then
    begin
      fastClick(MOUSE_LEFT);
      break;
    end;
  end;

  // Starts making dough
  if productionScreen.isOpen(5000) then

  mix := intToBox(287, 328, 509, 353);
  mixTPA := mix.createTPA;

  smartImage.debugTPA(mixTPA, false);

  mouseBox(mix, MOUSE_MOVE);
  wait(randomRange(250, 400));
  fastClick(MOUSE_LEFT);
  smartImage.clearArea(intToBox(1, 1, 750, 550));

end;

{------------------------------------------------------------------------------)
 Function: waitDoughing
 Description: Waits for useFlour to finish up (signaled by a full inventory)
(------------------------------------------------------------------------------}

procedure waitDoughing();
begin
  if DEBUG then
    writeLn('Waiting for dough to be made ...');

  antiban();

  waitFunc(@(packFull), 50, 20000)
end;

{------------------------------------------------------------------------------)
 Function: walkToBank
 Description: Walks back to the bank (from fountain)
(------------------------------------------------------------------------------}

procedure walkToBank();
begin
  if DEBUG then
    writeLn('Walking back to bank ...');
  if SPS.walkPath(pathBank) and tabBackpack.isFull then
    minimap.waitPlayerMoving()
end;

{------------------------------------------------------------)
 Function: outOfFlour
 Description: Checks if there is any flour left in the bank
 Credits: The Mayor taught me this, Thanks!
(------------------------------------------------------------}

function outOfFlour(): boolean;
var
  x, y, leftInBank: integer;
begin
  findDTM(potFlourDTM, x, y, bankScreen.getBounds());
  leftInBank := getItemAmount(bankScreen.getBankSlotBox(bankScreen.pointToSlot([x, y])));

  if leftInBank < 1 then
  begin
    result := true;
    writeLn('Out of flour, terminating script...');
    exit;
  end;

  result := false;

  if DEBUG then
    writeLn('There is still flour in the bank...');
end;

function bankOpen(): boolean;
begin
  if bankScreen.isOpen then
    result := true;
end;

procedure doBanking();
var
  x, y, i: integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;

begin
  if DEBUG then
    writeLn('Banking ...');

  // Find banker colors
  findColorsSpiralTolerance(x, y, TPA, 6041158, mainScreen.getBounds(), 11, colorSetting(2, 0.42, 0.69));

  if length(TPA) < 1 then
    exit;

  // Makes smaller box selections (multiple) around banker colors of TPA
  ATPA := TPA.toATPA(30, 30);
  // Sorts banker arrays by closest to player first, using ATPA
  ATPA.sortFromMidPoint(mainscreen.playerPoint);

  // Draw boxes around each banker on smart
  smartImage.debugATPA(ATPA);

  // Clicks on closest banker
  for i := 0 to high(ATPA) do
  begin
    mouse(middleTPA(ATPA[i+1]), MOUSE_MOVE);
    if isMouseOverText(['anker'], 500) then
    begin
      fastClick(MOUSE_LEFT);
      waitFunc(@bankOpen, 50, 5000);
      break;
    end;
  end;

  if outOfFlour then
  // Uses preset 1, thus depositing current inventory, withdrawing next one
    bankScreen.clickButton(BANK_BUTTON_PRESET_1);

end;

procedure signature();
begin

  writeLn('.____                            _________            .__        __          ');
  wait(125);
  writeLn('|    |   _____    _____ _____   /   _____/ ___________|__|______/  |_  ______');
  wait(125);
  writeLn('|    |   \__  \  /     \\__  \  \_____  \_/ ___\_  __ \  \____ \   __\/  ___/');
  wait(125);
  writeLn('|    |___ / __ \|  Y Y  \/ __ \_/        \  \___|  | \/  |  |_> >  |  \___ \ ');
  wait(125);
  writeLn('|_______ (____  /__|_|  (____  /_______  /\___  >__|  |__|   __/|__| /____  >');
  wait(125);
  writeLn('        \/    \/      \/     \/        \/     \/         |__|             \/ ');
  wait(750);
  writeLn('');
  writeLn('                         Script: ' + SCRIPT + ' v' + VERSION);
  writeLn('');
  writeLn('                         Loading, please wait....');
  writeLn('');

end;

procedure mainLoop();
begin

  //progressReport();
  orientPlayer();

  repeat
    walkToWell();
    useFlour();
    waitDoughing();
    antiban();
    walkToBank();
    doBanking();
    antiban();
    //progressReport();
  until outOfFlour;

  //player[currentPlayer].exitToLobby();

end;

begin
  clearDebug();
  signature();

  smartShowConsole := false;
  smartEnableDrawing := true;
  disableSRLDebug := true;
  disguise('LamaDougher');
  setupSRL();
  writeLn('');

  checkForSPSMap();
  loadDTM();
  loadSPSPath();
  getPrices();

  mainLoop();

end.
