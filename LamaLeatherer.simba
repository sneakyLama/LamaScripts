program LamaLeatherer;
  {$DEFINE SMART}
  {$i srl-6/srl.simba}
  {$i srl-6/lib/misc/srlplayerform.simba}

const
{ Script Info }
  SCRIPT  = 'LamaLeatherer v';
  VERSION = '1.0';

{ Player Form }
  P_PRESET      = 1;
  P_LOADS_TO_DO = 0;
  P_HOTK_MAKE   = '7';
  P_HIDE        = 0;
  P_BANK_DIR    = 0;

{ Hides }
  HIDE_ROYAL = 0;
  HIDE_BLACK = 1;
  HIDE_RED   = 2;
  HIDE_BLUE  = 3;
  HIDE_GREEN = 4;

{ Hide Webstrings }
  W_HIDE_ROYAL = 'Royal_dragonhide';
  W_HIDE_BLACK = 'Black_dragonhide';
  W_HIDE_RED   = 'Red_dragonhide';
  W_HIDE_BLUE  = 'Blue_dragonhide';
  W_HIDE_GREEN = 'Green_dragonhide';

{ Leather Webstrings }
  W_LEATHER_ROYAL = 'Royal_dragon_leather';
  W_LEATHER_BLACK = 'Black_dragon_leather';
  W_LEATHER_RED   = 'Red_dragon_leather';
  W_LEATHER_BLUE  = 'Blue_dragon_leather';
  W_LEATHER_GREEN = 'Green_dragon_leather';

{ Other }
  XP_INV = 435;

{ Bank Boxes }
  BANK_EAST  = 0;
  BANK_SOUTH = 1;
  BANK_WEST  = 2;
  BANK_NORTH = 3;

var
  loadsDone, xpGained, xpPerHour: integer;
  hidePrice, leatherPrice, castPrice, castProfit, profitPerHour, profitMade, profitTotal: integer;
  leatherChoice: string;
  scriptTime, proggyTime: TTimeMarker;
  bankBox: TBox;

function strToHide(s: string): integer;
begin
  case s of
    'Royal': result := HIDE_ROYAL;
    'Black': result := HIDE_BLACK;
    'Red': result := HIDE_RED;
    'Blue': result := HIDE_BLUE;
    'Green': result := HIDE_GREEN;
  else
    writeln('Invalid hide selection!');
  end;
end;

procedure initPlayerForm();
begin
  with playerForm do
  begin
    name := 'Lama''s Leather Maker'; // the title of the SPF, usually the name of your script
    scriptHelpThread := '';    // a link to a help thread, if set to '' will link to my setup guide

    editBoxLabels := ['Loads to Do', 'World', 'Action Bar Hotkey'];     // edit boxes are created for each array element
    editBoxDefaults := ['0', '0', '7'];             // optional default values for each edit box; array length must equal editBoxLabel length

    editBoxHints := ['How many inventories of leather to make?', 'What world to log on to? (Leave at 0 for random)', 'Action Bar hotkey bind for make leather spell?'];

    checkBoxLabels := ['Text Progress Report', 'Debug SRL', 'Debug SMART']; // same as editBoxLabels but for check boxes
    checkBoxDefaults := ['true', 'false', 'false'];
    checkBoxHints := ['Output the progress report to the debug box?', 'Debug SRL stuff?', 'Want to see colorful boxes on SMART?'];

    comboBoxLabels := ['Bank Preset', 'Hide Type', 'Bank Direction'];
    comboBoxDefaults := ['1', 'Royal', 'North'];
    comboBoxHints := ['Use which of your bank presets?', 'Which type of hide will you be working with?', 'Which direction is the bank from your character?'];

    // this needs to be done for every element in the comboBoxLabels array
    setLength(comboBoxItems, length(comboBoxLabels));
    comboBoxItems[0] := ['1', '2'];
    comboBoxItems[1] := ['Royal', 'Black', 'Red', 'Blue', 'Green'];
    comboBoxItems[2] := ['North', 'East', 'South', 'West'];

  end;
end;

procedure declarePlayers();
var
  i: integer;
begin
  players.setup(playerForm.playerNames, playerForm.playerFile); // load the SPF players from the SRL Player Manager
  currentPlayer := 0;                // player to use first

  for i := 0 to high(players) do
    with players[i] do
    begin
      // convert the integers
      integers[P_LOADS_TO_DO] := strToInt(playerForm.players[i].settings[0]);  // Loads to Do
      world := strToInt(playerForm.players[i].settings[1]);
      strings[P_HOTK_MAKE] := playerForm.players[i].settings[2];

      // booleans
      booleans[0] := strToBool(playerForm.players[i].settings[3]); // Proggy on?
      booleans[1] := strToBool(playerForm.players[i].settings[4]); // Debug SRL
      booleans[2] := strToBool(playerForm.players[i].settings[5]); // Debug SMART

      case playerForm.players[i].settings[6] of                    // Bank Preset
        '1': integers[P_PRESET] := BANK_BUTTON_PRESET_1;
        '2': integers[P_PRESET] := BANK_BUTTON_PRESET_2;
      end;

      integers[P_HIDE] := strToHide(playerForm.players[i].settings[7]); // Which Hide to use

      case playerForm.players[i].settings[9] of                    // Bank Direction
        'North': integers[P_BANK_DIR] := BANK_NORTH;
        'East': integers[P_BANK_DIR] := BANK_EAST;
        'South': integers[P_BANK_DIR] := BANK_SOUTH;
        'West': integers[P_BANK_DIR] := BANK_WEST;
      end;

    end;
end;

{------------------------------------------------------------------------------)
 Function: getGEPrice
 Description: Finds the price of an item off the wiki.
 Credits: The Mayor
(------------------------------------------------------------------------------}

function getGEPrice(itemString: String): Integer;
var
  wikiaPage, priceString: string;

begin
  wikiaPage := getPage('http://runescape.wikia.com/wiki/Exchange:' + itemString);
  priceString := between('GEPrice">', '</span>', wikiaPage);
  result := strToIntDef(extractFromStr(priceString, numbers), -1);
  writeLn('-- ' + itemString + ' price: ' + toStr(result));
end;

{------------------------------------------------------------------------------)
 Function: perHour
 Description: Converts an integer to a 'per hour' amount.
 Credits: Coh3n
(------------------------------------------------------------------------------}

function perHour(amt, time: integer): integer;
begin
  if (amt = -1) then
  begin
    result := -1;
    exit;
  end;

  try
    result := round((amt * 60) / (time / 60000));
  except
  end;
end;

function setBankBox(dir: integer): TBox;
var
  direction: string;
begin
  case dir of
    BANK_EAST:
    begin
      result := [309, 174, 342, 205];
      direction := 'East';
    end;
    BANK_SOUTH:
    begin
      result := [274, 213, 298, 234];
      direction := 'South';
    end;
    BANK_WEST:
    begin
      result := [249, 179, 270, 206];
      direction := 'West';
    end;
    BANK_NORTH:
    begin
      result := [275, 161, 300, 181];
      direction := 'North';
    end;
  end;

  writeLn('Bank is: ' + direction);
end;

function setHideInfo(hide: integer): string;
begin
  if hide = HIDE_ROYAL then
  begin
    leatherChoice := 'Royal Dragonhide';
    hidePrice := getGEPrice(W_HIDE_ROYAL);
    leatherPrice := getGEPrice(W_LEATHER_ROYAL);
  end
  else if hide = HIDE_BLACK then
  begin
    leatherChoice := 'Black Dragonhide';
    hidePrice := getGEPrice(W_HIDE_BLACK);
    leatherPrice := getGEPrice(W_LEATHER_BLACK);
  end
  else if hide = HIDE_RED then
  begin
    leatherChoice := 'Red Dragonhide';
    hidePrice := getGEPrice(W_HIDE_RED);
    leatherPrice := getGEPrice(W_LEATHER_RED);
  end
  else if hide = HIDE_BLUE then
  begin
    leatherChoice := 'Blue Dragonhide';
    hidePrice := getGEPrice(W_HIDE_BLUE);
    leatherPrice := getGEPrice(W_LEATHER_BLUE);
  end
  else if hide = HIDE_GREEN then
  begin
    leatherChoice := 'Green Dragonhide';
    hidePrice := getGEPrice(W_HIDE_GREEN);
    leatherPrice := getGEPrice(W_LEATHER_GREEN);
  end else
  begin
    writeLn('Invalid hide choice ...');
    terminateScript;
  end;

  result := 'Using ' + leatherChoice;
  writeLn(result);
end;

function findNormalRandoms: boolean;  // Exits out of common randoms
begin
  result := exitSquealOfFortune or claimSpinTicket;
end;

procedure antiban();
begin
  case (random(500) + 1) of
    1:
    begin
      boredHuman(true);
      MainScreen.SetAngle(MS_ANGLE_HIGH);
      minimap.setAngle(MM_DIRECTION_NORTH);
    end;
    2..400:
    begin
      mouseSpeed := 40;
      sleepAndMoveMouse(randomRange(100, 500));
      mouseSpeed := 20;
    end;
    401..500:
    begin
      mouseOffClient(random(4));
      wait(gaussRangeInt(0, 7500));
    end;
  end;
end;

procedure bank();
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i: integer;
begin
  mouseBox(bankBox, MOUSE_MOVE);
  if isMouseOverText(['ank', 'hest']) then
    fastClick(MOUSE_LEFT);
  wait(random(300) + 400);
  if bankScreen.isOpen(1000) or pinScreen.isOpen(1000) then
  begin
    if pinScreen.isOpen() then
      pinScreen.enter(players[currentPlayer].bankPin);
    wait(randomRange(500, 750));
    bankScreen.clickButton(players[currentPlayer].integers[P_PRESET]);
    if not bankScreen.isOpen(1000) then
  end;
end;

procedure makeLeather();
var
  astralCount, bodyCount: integer;
begin
  if (tabBackpack.count() < 27) then
  begin
    astralCount := getItemAmount(tabBackpack.getSlotBox(1));
    if astralCount < 2 then
    begin
      writeLn('No Astrals left ...');
      players[currentPlayer].exitToLobby();
      terminateScript();;
    end;
    bodyCount := getItemAmount(tabBackpack.getSlotBox(2));
    if bodyCount < 2 then
    begin
      writeLn('No Bodys left ...');
      players[currentPlayer].exitToLobby();
      terminateScript();
    end;

    typeSend(P_HOTK_MAKE, false);
    tabBackpack.mouseSlot(3, MOUSE_MOVE);
    if isMouseOverText(['ragonhi', 'hide']) then
      fastClick(MOUSE_LEFT);

    if productionScreen.isOpen(1500) then
    begin
      productionScreen.clickStart();
      antiban();
      wait(randomRange(8000, 12500));
      writeLn('Out of materials ... exiting to lobby');
      players[currentPlayer].exitToLobby();
      terminateScript();
    end;
  end;

  typeSend(P_HOTK_MAKE, false);
  tabBackpack.mouseSlot(3, MOUSE_MOVE);
  if isMouseOverText(['ragonhi', 'hide']) then
    fastClick(MOUSE_LEFT);

  if productionScreen.isOpen(1500) then
  begin
    productionScreen.clickStart();
    antiban();
    tabBackpack.waitSlotPixelChange(27, 17500)
  end;
end;

procedure proggy();
begin
  if proggyTime.getTime() < 25000 then
    exit;
  clearDebug();

  xpGained := xpGained + (loadsDone * XP_INV);
  profitMade := castProfit * 5;
  profitTotal := (profitMade * 5) * loadsDone;

  writeLn('|=====================================|');
  writeLn('         ' + SCRIPT + VERSION + '         ');
  writeLn('                                      ');
  writeLn('  Time Running: ' + (msToTime(scriptTime.getTime(), TIME_ABBREV)));
  writeLn('  Loads Done  : ' + toStr(loadsDone) + '/' + (toStr(playerForm.players[currentPlayer].settings[0])) + ' loads');
  writeLn('  Profit Made : ' + toStr(profitTotal) + ' (' + toStr(perHour(profitTotal, scriptTime.getTime())) + ' )');
  writeLn('  XP Gained   : ' + toStr(xpGained) + ' (' + toStr(perHour(xpGained, scriptTime.getTime())) + ' )');
  writeLn('                                       ');
  writeLn('|=====================================|');
  proggyTime.start();
end;

procedure setup();
var
  i: integer;
begin
  clearDebug();
  smartEnableDrawing := true;
  initPlayerForm();
  runPlayerForm();
  declarePlayers();
  if (players[currentPlayer].booleans[2]) then
    smartShowConsole := true
  else
    smartShowConsole := false;
  if (not playerForm.isScriptReady) then
    terminatescript;
  setupSRL();
  if not players[currentPlayer].booleans[1] then
    disableSRLDebug:=true
  else
    disableSRLDebug:=false;
  setHideInfo(P_HIDE);
  bankBox := setBankBox(P_BANK_DIR);
  castPrice := (hidePrice * 5) + (getGEPrice('Astral_rune') * 2) + (getGEPrice('Body_rune') * 2);
  castProfit := (leatherPrice * 5) - castPrice;
  clearDebug();
end;

procedure mainLoop();
begin
  if not isLoggedIn then
  begin
    if not players[currentPlayer].login() then
      terminateScript;
    writeln('Just logged in... waiting a moment');
    wait(RandomRange(2000, 6500));
  end;
  minimap.clickCompass();
  mainScreen.setAngle(MS_ANGLE_HIGH);
  findNormalRandoms();

  xpGained := 0;
  profitTotal := 0;
  loadsDone := 0;

  scriptTime.start();
  repeat
    bank();
    makeLeather();
    loadsDone := loadsDone + 1;
    if players[currentPlayer].booleans[1] then
      proggy();
  until loadsDone >= (players[currentPlayer].integers[P_LOADS_TO_DO]);

  writeLn('Load target met ...');
  proggy();
  writeLn('Exiting to lobby ...');
  players[currentPlayer].exitToLobby();
end;

begin
  setup();
  mainLoop();
end.
