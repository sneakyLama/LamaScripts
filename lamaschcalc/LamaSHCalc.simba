{=============================================\
|              Superheat Calculator           |
|                     by Lama                 |
|_____________________________________________|
|                                             |
|  Author: Lama                               |
|  Description: Calculate what you need for   |
|               superheating your ores        |
|  Contact: Private Message @ SRL Forums!     |
|                                             |
 \____________________________________________}

program LamaSHCalc;

{$i srl-6/lib/misc/srlplayerform.simba}

const

P_BAR = 0;

BRONZE_BAR = 1;
IRON_BAR = 2;
SILVER_BAR = 3;
STEEL_BAR = 4;
GOLD_BAR = 5;
MITHRIL_BAR = 6;
ADAMANT_BAR = 7;
RUNE_BAR = 8;

var
priceOre, priceNat, priceCoal, coalTotal: integer;
barUsing, barType, oreType: string;

procedure initForm();
begin
  with playerForm do
  begin
    name := 'Lama''s Superheat Calculator';
    scriptHelpThread := '';

    editBoxLabels := ['Budget', 'How Many Ore'];
    editBoxDefaults := ['0', '0'];
    editBoxHints := ['What is your budget?',
                     'How many ore are you looking to buy?'];

    checkBoxLabels := ['Use Budget', 'Use How Many Ore'];
    checkBoxDefaults := ['true', 'true'];
    checkBoxHints := ['Use the Budget you entered to find optimal purchases',
                      'Use how many ores you are looking to buy to see how much you have to spend'];

    setLength(comboBoxItems, length(comboBoxLabels));
    comboBoxItems[0] := ['Bronze', 'Iron', 'Silver', 'Steel', 'Gold', 'Mithril', 'Adamant', 'Rune'];
  end;
end;

procedure declareVariables();
begin
  var
  i: integer;
begin
  players.setup(playerForm.playerNames, playerForm.playerFile);
  currentPlayer := 0;

  for i = 0 to high(players) do
    with players[i] do
    begin
      integers[0] := strToInt(playerForm.players[i].settings[0]);
      integers[1] := strToInt(playerForm.players[i].settings[1]);

      booleans[0] := strToBool(playerForm.players[i].settings[2]);
      booleans[1] := strToBool(playerForm.players[i].settinsg[3]);

      case playerForm.players[i].settings[4] of
        'Bronze':  integers[P_BAR] := BRONZE_BAR;
        'Iron':    integers[P_BAR] := IRON_BAR;
        'Silver':  integers[P_BAR] := SILVER_BAR;
        'Steel':   integers[P_BAR] := STEEL_BAR;
        'Gold':    integers[P_BAR] := GOLD_BAR;
        'Mithril': integers[P_BAR] := MITHRIL_BAR;
        'Adamant': integers[P_BAR] := ADAMANT_BAR;
        'Rune':    integers[P_BAR] := RUNE_BAR;
      end;
    end;
end;

{ ------------------------------------- )
 Function: getGEPrice
 Description: Gets prices off the wikia
 Credits: The Mayor
( ------------------------------------- }

function getGEPrice(itemString: String): Integer;
var
  wikiaPage, priceString: string;
begin
  wikiaPage := getPage('http://runescape.wikia.com/wiki/Exchange:' + itemString);
  priceString := between('GEPrice">', '</span>', wikiaPage);
  result := strToIntDef(extractFromStr(priceString, numbers), -1);
  writeLn('-- ' + itemString + ' price: ' + toStr(result));
end;

{ --------------------------------------------- )
 Procedure: setVariables
 Description: Sets up prices, counts, totals etc
( --------------------------------------------- }

procedure setVariables();
begin

  priceNat := getGEPrice('Nature_rune');
  priceCoal := getGEPrice('Coal');

  if (BAR = 3) then
    begin
      priceOre := getGEPrice('Runite_ore');
      coalTotal := 8;
      barUsing := RUNITE;
      barType := 'Rune_bar';
      oreType := 'Runite_ore';
    end;
  if (BAR = 2) then
    begin
      priceOre := getGEPrice('Mithril_ore');
      coalTotal := 4;
      barUsing := MITHRIL;
      barType := 'Mithril_bar';
      oreType := 'Mithril_ore';
    end;
  if (BAR = 1) then
    begin
      priceOre := getGEPrice('Iron_ore');
      coalTotal := 2;
      barUsing := STEEL;
      barType := 'Steel_bar';
      oreType := 'Iron_ore';
    end;

end;

{ ----------------------------------------------------------------------- )
 Procedure: budgetOptimize
 Description: Calculates how much of each you can buy for a certain budget
( ----------------------------------------------------------------------- }

procedure budgetOptimize();
var
pricePerCast, totalCost, sellPrice, totalProfit: integer;
toBuy: integer;
begin

  pricePerCast := priceOre + priceNat + (priceCoal * coalTotal);

  toBuy := floor(CASH / pricePerCast);
  totalCost := (toBuy * pricePerCast);
  sellPrice := ((getGEPrice(barType)) * toBuy);
  totalProfit := sellPrice - totalCost;

  writeLn('');
  writeLn('Optimizing your budget...');
  wait(750);
  writeLn('');
  writeLn('With: ' + toStr(CASH) + ' gp, you can buy:');
  writeLn('-- ' + oreType + ': ' + toStr(toBuy) + ' ( ' + toStr(toBuy * priceOre) + ' )');
  writeLn('-- ' + 'Nature Runes: ' + toStr(toBuy) + ' ( ' + toStr(toBuy * priceNat) + ' )');
  writeLn('-- ' + 'Coal: ' + toStr(toBuy * coalTotal) + ' ( ' + toStr((toBuy * priceCoal) * coalTotal) + ' )');
  writeLn('');
  wait(750);
  writeLn('ESTIMATED TOTAL COST: ' + toStr(totalCost));
  writeLn('ESTIMATED SELL PRICE: ' + toStr(sellPrice));
  writeLn('ESTIMATED PROFIT: ' + toStr(totalProfit));

end;

{ ----------------------------------------------------------------------------------- )
 Procedure: orePricer
 Description: Calculates costs and material buy numbers based on how much ore you want
( ----------------------------------------------------------------------------------- }

procedure orePricer();
var
sellPrice, totalCost, coalCount, totalProfit: integer;
begin

 coalCount := coalTotal * ORECOUNT;
 totalCost := ((priceOre * ORECOUNT) + (priceNat * ORECOUNT) + (coalTotal * priceCoal * ORECOUNT));
 sellPrice := (getGEPrice(barType) * ORECOUNT);
 totalProfit := sellPrice - totalCost;

 writeLn('');
 writeLn('Calculating your costs...');
 wait(750);
 writeLn('');
 writeLn('BUYING: ' + oreType + '... ');
 writeLn('COUNT: ' + toStr(ORECOUNT) + '( ' + toStr(priceOre * ORECOUNT) + ' )');
 writeLn('Nature runes needed: ' + toStr(ORECOUNT) + '( ' + toStr(priceNat * ORECOUNT) + ' )');
 writeLn('Coal needed: ' + toStr(coalCount) + '( ' + toStr((priceCoal * ORECOUNT) * coalTotal) + ' )');
 writeLn('');
 wait(750);
 writeLn('ESTIMATED TOTAL COST: ' + toStr(totalCost));
 writeLn('ESTIMATED SELL PRICE: ' + toStr(sellPrice));
 writeLn('ESTIMATED PROFIT: ' + toStr(totalProfit));

end;

procedure mainLoop();
begin

  if ORECOUNT < 1 then
    budgetOptimize();

  if ORECOUNT > 1 then
    orePricer();

end;

begin
  clearDebug();
  writeLn('Getting prices...');
  setupSRL();

  initForm();
  declareVariables();
  setVariables();
  mainLoop();
  writeLn('');
end.
