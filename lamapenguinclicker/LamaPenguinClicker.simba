program LamaPenguinClicker;
  {$DEFINE SMART}
  {$I SRL-6/SRL.Simba}
  {$i SRL-6/lib/misc/srlplayerform.simba}

{              SETUP              }
///////////////////////////////////
{          1. Hit RUN             }
{          2. Fill out Form       }
{          3. Start Script        }

const
  SCRIPT = 'Lama''s Penguin Clicker v';
  VERSION = 1.1;

var
  XpStart, XpCurrent, XpGained, XpPerHour, PaintBitmap, Z, DumbInt: integer;
  ProgTime, ScriptTime: TTimeMarker;

//By Olly
function GetGithubPage(const URL: String): String;
var
  NewURL: String;
  p: Integer;
begin
  Result := '';
  p := Pos('.com/', URL);
  if (p = 0) then
    Exit;

  NewURL := Copy(URL, p + Length('.com/'), Length(URL) - p + Length('.com/'));
  Result := GetPage('http://cdn.rawgit.com/' +  Replace(NewURL, 'blob/', '', [rfReplaceAll]));
end;

procedure checkForUpdates(); // Credits: The Mayor
var
  newFile: integer;
  latestScript, newFileName: string;
  onlineVersion: extended;
begin
  writeln('Checking for script updates:');
  onlineVersion := strToFloat(getGithubPage('https://github.com/sneakyLama/LamaScripts/blob/master/lamapenguinclicker/version.txt'));
  writeLn(' ---> Script version: ' + toStr(VERSION) + ' | Online version: ' + toStr(onlineVersion));

  if onlineVersion > VERSION then
  begin
    writeLn(' ---> Downloading the newer version from Github');
    latestScript := getGithubPage('https://github.com/sneakyLama/LamaScripts/blob/master/lamapenguinclicker/LamaPenguinClicker.simba');
    newFileName := scriptPath + 'LamasPenguinClicker v'+ toStr(onlineVersion) +'.simba';
    newFile := rewriteFile(newFileName, true);

    if not writeFileString(newFile, latestScript) then
    begin
      writeLn(' ---> Fatal error writing to ' + newFileName);
      terminatescript();
    end;

    closeFile(newFile);
    writeLn(' ---> New script downloaded to ' + newFileName);
    writeLn(' ---> Please use the new one instead!');
    writeLn('');
    terminateScript();
  end else
    writeLn(' ---> You have the latest revision.');

  writeLn('');
end;

procedure checkForImages(path, link, item: string); // Credits: Kevin, The Mayor
var
  progFile: longInt;
  picName: string;

begin
  picName := AppPath + path;

  try
    if not fileExists(picName) then
    begin
      writeLn('NOTIFICATION: ' + item + ' does not exist - Downloading it now!.');
      progFile := createFile(picName);
    end else
      exit;

    closeFile(progFile);

    progFile := rewriteFile(picName, false);
    writeFileString(progFile, getPage(link));
    writeLn('NOTIFICATION: ' + item + ' has been download to Simba folder!');
    writeLn('');
  finally
    if (progFile > 0) then
      closeFile(progFile);
  end;
end;

procedure initPlayerForm(); // What is on the playerForm
begin
  with playerForm do
  begin
    name := 'Lama''s Penguin Clicker'; // the title of the SPF, usually the name of your script
    scriptHelpThread := 'https://villavu.com/forum/showthread.php?t=110594';    // a link to a help thread, if set to '' will link to my setup guide

    editBoxLabels := ['Run Time', 'Break Time', 'Wind Penguin Hotkey', 'Release Penguin Hotkey', 'World'];
    editBoxDefaults := ['180', '15', '8', '9', '0'];
    editBoxHints := ['How long (in minutes) to run the script? (Before the end, or before each break, depending if you want to break)', 'How long should a break be?', 'Action Bar Hotkey for winding penguins', 'Action Bar Hotkey for releasing wound penguins', 'What world do you want to be on? (Leave at 0 for random)'];

    checkBoxLabels := ['Break', 'Paint Proggy', 'SMART Debug', 'Debug SRL']; // same as editBoxLabels but for check boxes
    checkBoxDefaults := ['true', 'false', 'false', 'false'];
    checkBoxHints := ['Do you want to have breaks?', 'See a report for useful information?', 'Debug SMART?', 'Debug SRL?'];
  end;
end;

procedure declarePlayers(); // Declare player and variables from playerForm
var
  i: integer;
begin
  players.setup(playerForm.players);  // load the SPF players from the SRL Player Manager
  currentPlayer := 0; // player to use first
  for i := 0 to high(players) do  // set player attributes based on the settings from the form
    with players[i] do
    begin
      integers[0] := strToInt(playerForm.players[i].settings[0]);
      integers[1] := strToInt(playerForm.players[i].settings[1]);
      strings[0] := playerForm.players[i].settings[2];   // Hotkey assignment for winding penguins
      strings[1] := playerForm.players[i].settings[3];   // Hotkey assignment for releasing wound penguins
      world := strToInt(playerForm.players[i].settings[4]);

      booleans[0] := strToBool(playerForm.players[i].settings[5]);
      booleans[1] := strToBool(playerForm.players[i].settings[6]);
      booleans[2] := strToBool(playerForm.players[i].settings[7]);
      booleans[3] := strToBool(playerForm.players[i].settings[8]);
    end;
end;

function perHour(amt, time: integer): integer;  // Credit: Coh3n
begin
  if (amt = -1) then
  begin
    result := -1;
    exit;
  end;

  try
    result := round((amt * 60) / (time / 60000));
  except
  end;
end;

function findNormalRandoms: boolean;  // Exits out of common randoms
begin
  result := exitSquealOfFortune or claimSpinTicket;
end;

procedure doPenguinStuff();  // Winds, releases, and catches clockwork penguins
begin
  mouseOval(randomRange(287, 292), randomRange(190, 200), 3, 4, MOUSE_LEFT);  // Moves and clicks randomly in an area around the players knees (where the penguins are)
  wait(randomRange(85, 175));
  fastClick(MOUSE_LEFT);
  typeSend(players[currentPlayer].strings[1], false);
  wait(randomRange(65, 100));
  typeSend(players[currentPlayer].strings[0], false);
  typeSend(players[currentPlayer].strings[1], false);
  fastClick(MOUSE_LEFT);
  case (random(20) + 1) of  // For extra human-esque hotkeying and clicking, tried to be as spammy
    1..5:                   //                                                   as possible
    begin                   // [This area is where to tweak to speed up script, it can be faster]
      typeSend(players[currentPlayer].strings[0], false);
      fastClick(MOUSE_LEFT);
      typeSend(players[currentPlayer].strings[1], false);
      wait(randomRange(75, 145));
      typeSend(players[currentPlayer].strings[0], false);
      fastClick(MOUSE_LEFT);
    end;
    6..10:
    begin
      typeSend(players[currentPlayer].strings[1], false);
      wait(randomRange(75, 145));
      fastClick(MOUSE_LEFT);
    end;
    11..15: fastClick(MOUSE_LEFT);
    16..21:
    begin
      typeSend(players[currentPlayer].strings[0], false);
      wait(randomRange(60, 85));
      fastClick(MOUSE_LEFT);
      typeSend(players[currentPlayer].strings[1], false);
      typeSend(players[currentPlayer].strings[0], false);
    end;
  end;
  wait(randomRange(45, 105));
  fastClick(MOUSE_LEFT);
  typeSend(players[currentPlayer].strings[1], false);
  typeSend(players[currentPlayer].strings[0], false);
  wait(randomRange(65, 145));
  fastClick(MOUSE_LEFT);
  wait(randomRange(100, 150));
  typeSend(players[currentPlayer].strings[1], false);
  fastClick(MOUSE_LEFT);
end;

function penguinsLeft(): boolean;  // Checks if there are penguins to pick up before breaking/ending
var
  x, y: integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
begin
  findColorsSpiralTolerance(x, y, TPA, 10005418, mainScreen.getBounds(), 14, colorSetting(2, 0.11, 0.45));
  mainScreen.filterPointsPlayer(TPA);
  if length(TPA) < 1 then
  begin
    mouseOval(randomRange(287, 292), randomRange(190, 200), 3, 4, MOUSE_MOVE);
    result := isMouseOverText(['enguin'], 500);
    if result then
      fastClick(MOUSE_LEFT);
  end else
    result := true;
end;

procedure pickUpPenguins();  // Picks up remaining penguins before breaking/logging out
var
  x, y, i: integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
begin
  findColorsSpiralTolerance(x, y, TPA, 10005418, mainScreen.getBounds(), 14, colorSetting(2, 0.11, 0.45));
  if length(TPA) < 1 then
    exit;
  mainScreen.filterPointsPlayer(TPA);
  ATPA := TPA.toATPA(30, 30);
  ATPA.sortFromMidPoint(mainscreen.playerPoint);
  if players[currentPlayer].booleans[2] then
    smartImage.debugATPA(ATPA);
  for i := 0 to high(ATPA) do
  begin
    mouse(middleTPA(ATPA[i]), MOUSE_MOVE);
    if isMouseOverText(['ick', 'enguin'], 500) or isMouseOverText(['ake', 'enguin'], 500) then
    begin
      fastClick(MOUSE_LEFT);
      smartImage.clearArea(mainScreen.getBounds());
      break;
    end;
  end;
end;

procedure cleanUpPenguins();
begin
  for z := 0 to 2 do // <-- Stupid Failsafe
    repeat
      writeLn('Checking for penguins [' + toStr(z + 1) + '/3]');
      pickUpPenguins();
      wait(randomRange(500, 1000));
    until not penguinsLeft();
end;

procedure antiban();  // Some basic antiban to spice things up
begin
  case random(1000) of
    0: hoverSkill(SKILL_AGILITY);
    1:  // Simulates checking how many MySpace followers you have now :)
    begin
      cleanUpPenguins();
      mouseOffClient(OFF_CLIENT_RANDOM);
      wait(randomRange(15000, 30000));
    end;
    2..10: sleepAndMoveMouse(randomRange(100, 250));
  end;
end;

procedure progressReport();  // Outputs a progress report with useful information
begin
  if progTime.getTime < 20000 then exit;
  smartImage.clear();
  xpCurrent := chatbox.getXPBar();
  xpGained := xpCurrent - xpStart;
  xpPerHour := perHour(XpGained, ScriptTime.getTime());
  if players[currentPlayer].booleans[1] then
  begin
    smartImage.drawBitmap(PaintBitmap, (point(4,424)));
    smartImage.drawText((msToTime(getTimeRunning, TIME_ABBREV)), Point(413, 440), UpCharsEx, false, clWhite); // Draw time running
    smartImage.drawText(groupDigits((round(xpGained / 12.5)), ',') + ' caught', Point(413, 479), UpCharsEx, false, 1268443); // Draw how many loads completed
    smartImage.drawText(groupDigits(xpGained, ',') + ' (' + (groupDigits(xpPerHour, ',')) + ' P/H)', Point(413, 518), UpCharsEx, false, clYellow);
    smartImage.drawText('Version: ' + toStr(VERSION), Point(257, 553), UpCharsEx, false, clGray);
  end;
  clearDebug();
  writeLn('|=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=|');
  writeLn('|           ' + SCRIPT + toStr(VERSION) + '             |');
  writeLn('|=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=|');
  writeLn(padR('| Time Running     : ' + timeRunning, 52) + '|');
  writeLn(padR('| Approx. Time Left: ' + msToTime((players[currentPlayer].integers[0] * 60000) - scriptTime.getTime(), TIME_ABBREV), 52) + '|');
  writeLn(padR('| Penguins Caught  : ' + groupDigits((round(xpGained / 12.5)), ','), 52) + '|');
  writeLn(padR('| XP Gained        : ' + groupDigits(xpGained, ',') + ' (' + groupDigits(xpPerHour, ',') + ' P/H)', 52) + '|');
  writeLn('|___________________________________________________|');
  progTime.start();
end;

procedure setup();  // Sets up all preliminary necessaries
begin
  clearDebug();
  smartEnableDrawing := true;
  checkForUpdates();
  checkForImages('Scripts\lamaPengProggy.png', 'https://i.imgur.com/s8Y2R2q.png', 'SMART Proggy');
  initPlayerForm();
  runPlayerForm();
  if (not playerForm.isScriptReady) then
    terminatescript;
  declarePlayers();
  setupSRL();
  if not players[currentPlayer].booleans[3] then
    disableSRLDebug:=true
  else
    disableSRLDebug:=false;
  dumbInt := 0;
  PaintBitmap := loadBitmap(appPath + '\Scripts\lamaPengProggy.png');
end;

procedure mainLoop();
begin
  if not isLoggedIn() then
  begin
    if not players[currentPlayer].login() then
      terminateScript;
    writeLn('Just logged in... waiting for a moment');
    wait(randomRange(1000, 3500));
  end;

  if dumbInt < 1 then
    begin
      xpStart := chatBox.getXPBar();
      dumbInt := 1;
    end;

  minimap.clickCompass();
  mainScreen.setAngle(MS_ANGLE_HIGH);
  mainScreen.setZoom(true);
  findNormalRandoms();

  ScriptTime.start();
  players[currentPlayer].integers[0] := players[currentPlayer].integers[0] + ScriptTime.getTime();
  repeat
    doPenguinStuff();
    progressReport();
    antiban();
  until (ScriptTime.getTime() >= (players[currentPlayer].integers[0] * randomRange(59500, 60500)));
  ScriptTime.pause();

  minimap.setAngle(MM_DIRECTION_EAST);
  cleanUpPenguins();
  progressReport();
  writeLn('Logging out ...');
  players[currentPlayer].exitToLobby();
end;

begin
  setup();
  if players[currentPlayer].booleans[0] then
    begin
      while (players.getActive() > 0) do  // If to break, will log back in after break time is done
        begin
          mainLoop();
          writeLn('Breaking ...');
          wait(players[currentPlayer].integers[1] * randomRange(55000, 70000));
          ScriptTime.reset();
        end;
    end
  else  // If not to break, will run until timeLeft runs out, then logs out for good
    mainLoop();
  freeBitmaps([PaintBitmap]);
end.
