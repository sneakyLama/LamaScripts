program ProteanPlanker;
  {$DEFINE SMART}
  {$i srl-6/srl.simba}
  {$i srl-6/lib/misc/srlplayerform.simba}

const
{ Script Info }
  SCRIPT  = 'LamaProteanPlanker v';
  VERSION = 1.0;

{ Player Form }
  P_PRESET      = 1;

var
  protoMade, planksMade, logCount, logTotal, plankCount: integer;
  logPrice, plankPrice, profitMade, profitTotal, profitPerHour: integer;
  logDTM, PaintBitmap, MillBitmap, PlankBitmap: integer;
  scriptTime: TTimeMarker;
  chatOne: TBox;

//By Olly
function GetGithubPage(const URL: String): String;
var
  NewURL: String;
  p: Integer;
begin
  Result := '';
  p := Pos('.com/', URL);
  if (p = 0) then
    Exit;

  NewURL := Copy(URL, p + Length('.com/'), Length(URL) - p + Length('.com/'));
  Result := GetPage('http://cdn.rawgit.com/' +  Replace(NewURL, 'blob/', '', [rfReplaceAll]));
end;

procedure checkForUpdates(); // Credits: The Mayor
var
  newFile: integer;
  latestScript, newFileName: string;
  onlineVersion: extended;
begin
  writeln('Checking for script updates:');
  onlineVersion := strToFloat(getGithubPage('https://github.com/sneakyLama/LamaScripts/blob/master/lamaproteanplanker/version.txt'));
  writeLn(' ---> Script version: ' + toStr(VERSION) + ' | Online version: ' + toStr(onlineVersion));

  if onlineVersion > VERSION then
  begin
    writeLn(' ---> Downloading the newer version from Github');
    latestScript := getGithubPage('https://github.com/sneakyLama/LamaScripts/blob/master/lamaproteanplanker/LamaProteanPlanker.simba');
    newFileName := scriptPath + 'LamasProteanPlanker v'+ toStr(onlineVersion) +'.simba';
    newFile := rewriteFile(newFileName, true);

    if not writeFileString(newFile, latestScript) then
    begin
      writeLn(' ---> Fatal error writing to ' + newFileName);
      terminatescript();
    end;

    closeFile(newFile);
    writeLn(' ---> New script downloaded to ' + newFileName);
    writeLn(' ---> Please use the new one instead!');
    writeLn('');
    terminateScript();
  end else
    writeLn(' ---> You have the latest revision.');

  writeLn('');
end;

procedure checkForImages(path, link, item: string); // Credits: Kevin, The Mayor
var
  progFile: longInt;
  picName: string;

begin
  picName := AppPath + path;

  try
    if not fileExists(picName) then
    begin
      writeLn('NOTIFICATION: ' + item + ' does not exist - Downloading it now!.');
      progFile := createFile(picName);
    end else
      exit;

    closeFile(progFile);

    progFile := rewriteFile(picName, false);
    writeFileString(progFile, getPage(link));
    writeLn('NOTIFICATION: ' + item + ' has been download to Simba folder!');
    writeLn('');
  finally
    if (progFile > 0) then
      closeFile(progFile);
  end;
end;

procedure initPlayerForm(); // What is on the playerForm
begin
  with playerForm do
  begin
    name := 'Lama''s Protean Planker'; // the title of the SPF, usually the name of your script
    scriptHelpThread := '';    // a link to a help thread, if set to '' will link to my setup guide

    editBoxLabels := ['Run Time', 'World'];
    editBoxDefaults := ['180', '0'];
    editBoxHints := ['How long (in minutes) to run the script?', 'What world do you want to be on? (Leave at 0 for random)'];

    checkBoxLabels := ['Place Own Sawmills', 'Paint Proggy', 'SMART Debug', 'Debug SRL']; // same as editBoxLabels but for check boxes
    checkBoxDefaults := ['true', 'false', 'false', 'false'];
    checkBoxHints := ['If no sawmill present, place ones from your bank?', 'See a report for useful information on screen?', 'Debug SMART?', 'Debug SRL?'];

    comboBoxLabels := ['Bank Preset'];
    comboBoxDefaults := ['1'];
    comboBoxHints := ['Use which of your bank presets?'];

    // this needs to be done for every element in the comboBoxLabels array
    setLength(comboBoxItems, length(comboBoxLabels));
    comboBoxItems[0] := ['1', '2'];
  end;
end;

procedure declarePlayers(); // Declare player and variables from playerForm
var
  i: integer;
begin
  players.setup(playerForm.playerNames, playerForm.playerFile);  // load the SPF players from the SRL Player Manager
  currentPlayer := 0; // player to use first
  for i := 0 to high(players) do  // set player attributes based on the settings from the form
    with players[i] do
    begin
      integers[0] := strToInt(playerForm.players[i].settings[0]);  // How long to run script before ending/breaking
      world := strToInt(playerForm.players[i].settings[1]);

      booleans[0] := strToBool(playerForm.players[i].settings[2]); // Place own sawmills
      booleans[1] := strToBool(playerForm.players[i].settings[3]); // Paint proggy image
      booleans[2] := strToBool(playerForm.players[i].settings[4]); // Debug SMART
      booleans[3] := strToBool(playerForm.players[i].settings[5]); // Debug SRL

      case playerForm.players[i].settings[6] of                    // Bank Preset
        '1': integers[P_PRESET] := BANK_BUTTON_PRESET_1;
        '2': integers[P_PRESET] := BANK_BUTTON_PRESET_2;
      end;
    end;
end;

function getGEPrice(itemString: string): integer;  // Credit: TheMayor
var
  wikiaPage, priceString: string;
begin
  wikiaPage := getPage('http://runescape.wikia.com/wiki/Exchange:' + itemString);
  priceString := between('GEPrice">', '</span>', wikiaPage);
  result := strToIntDef(extractFromStr(priceString, numbers), -1);
  writeLn('-- ' + itemString + ' price: ' + toStr(result));
end;

function perHour(amt, time: integer): integer;  // Credit: Coh3n
begin
  if (amt = -1) then
  begin
    result := -1;
    exit;
  end;

  try
    result := round((amt * 60) / (time / 60000));
  except
  end;
end;

function findNormalRandoms: boolean;  // Exits out of common randoms
begin
  result := exitTreasure() or claimTicket();
end;

procedure antiban;
begin
  case random(101) of
    0: pickUpMouse();
    1..6: mouseMovingObject();
    7..12: sleepAndMoveMouse(randomRange(750, 1750));
    12..18: wait(randomRange(250, 1250));
    19..25: smallRandomMouse();
  end;
end;

function noMill(): boolean;
var
  sawBox: TBox;
begin
  if bankScreen.isOpen(500) then
    bankScreen.clickButton(BANK_BUTTON_PRESET_1);
  sawBox := [249, 271, 303, 300];
  if not sawBox.colorExists(3237530, 26) then
    begin
      result := true;
      exit;
    end;
  result := false;
end;

procedure countStuff();
var
  protoBox: TBox;
  i: integer;
begin
  for i := 0 to 10 do
    begin
      plankCount := tabBackpack.countBitmap(PlankBitmap, 35);
      wait(randomRange(50, 175));
      if plankCount > 1 then
        break;
    end;
  planksMade := planksMade + plankCount;
  if plankCount > 27 then
    exit;
  protoBox := tabBackpack.getSlotBox(plankCount + 1);
  smartImage.drawBox(protoBox, false, clRed);
  protoMade := protoMade + ((28 - plankCount) * 2);
end;

procedure makePlanks();
begin
  logCount := tabBackpack.countDTM(logDTM);
  logTotal := logTotal + logCount;
  writeLn('Clicking sawmill ...');
  mouseOval(274, 286, 20, 15, MOUSE_MOVE);    // Clicks sawmill
  wait(225 + random(250));
  if isMouseOverText(['awmill', 'Portable sa', 'mill', 'saw'], 500) then
    fastclick(MOUSE_LEFT)
  else
  begin
    writeLn('Something didn''t happen while clicking sawmill ...');
    exit;
  end;
  writeLn('Making planks ...');
  wait(randomRange(950, 1800));
  begin                          // Inputs info for making planks
    case random(120) of
      0..100: typesend('123', true);
      101..110: typesend('31', true);
      111..120: typesend('32', true);
    end;
    wait(randomRange(1000, 1500));
    typesend('1', false);
    antiban();
    mouseOval(378, 197, 45, 60, MOUSE_MOVE);
    tabBackpack.waitSlotPixelChange(28, 5500);
    countStuff();
    wait(randomRange(400, 750));
  end;
end;

procedure doBanking;
begin
  if noMill() then     // If there is not a mill placed, it will withdraw from bank slot 10 and place
  begin
    writeLn('No sawmill found, going to place another ...');
    mouseBox([358, 178, 398, 225], MOUSE_MOVE);
    if IsMouseOverText(['Shantay c', 'y chest'], 500) then
      fastclick(MOUSE_LEFT);
    if _waitBankOrPinscreen(1500) then
    begin
      if pinScreen.isOpen() then
        pinScreen.enter(players[currentPlayer].bankPin);
      if bankscreen.getPackCount() >= 1 then
        bankScreen.quickDeposit(QUICK_DEPOSIT_INVENTORY);
      bankScreen.withdraw(MillBitmap, 50, 1);
      antiban();
      if bankScreen.isItemInPackSlot(1) then
        bankScreen.close();
      wait(randomRange(500, 1000));
      if tabBackpack.mouseSlot(1, MOUSE_MOVE) then
      begin
        if isMouseOverText(['ortabl', 'aw', 'mill']) then
          fastClick(MOUSE_LEFT)
        else
          writeLn('We didn''t manage to get a sawmill out ...');
        antiban();
        if conversationBox.isOpen(1500) then
          begin
            conversationBox.selectOption(1);
            writeLn('New mill placed successfully ...');
          end;
        wait(randomRange(500, 1250));
      end;
    end;
  end;

  writeLn('Banking ...');
  mouseBox([358, 178, 398, 225], MOUSE_MOVE);    // Normal bank procedure, if mill is placed
  if isMouseOverText(['Shantay c', 'y chest'], 500) then
    fastclick(MOUSE_LEFT);
  if _waitBankOrPinscreen(1500) then
  begin
    if pinScreen.isOpen() then
      pinScreen.enter(players[currentPlayer].bankPin);
    smartImage.clearArea([576, 321, 795, 563]);
    bankScreen.clickButton(players[currentPlayer].integers[P_PRESET]);
  end;
end;

procedure fixMisType(); // Shouldn't happen too often, but good to be safe
begin
  if chatOne.colorExists(14783855, 2) then // The lightish blue text (if not customized?)
    begin
      repeat
        typeByteWait(VK_ESCAPE, randomRange(50, 75)); // Failsafe for mistypes during makePlanks
      until chatOne.colorExists(9408398, 2); // The gray '[Press enter to talk]' text
    end;
end;

procedure proggy();
begin
  clearDebug();
  profitMade := (planksMade * plankPrice) - ((logPrice + 1350) * logTotal);

  writeLn('|=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=|');  // Debug Proggy
  writeLn(padR('|        ' + SCRIPT + toStr(VERSION), 40) + '|');
  writeLn('|=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=|');
  writeLn(padR('| Time Running: ' + (msToTime(scriptTime.getTime(), TIME_ABBREV)), 40) + '|');
  writeLn(padR('| Protean Made: ' + toStr(protoMade) + ' planks (' + groupDigits(perHour(protoMade, scriptTime.getTime()), ',') + ' ph)', 40) + '|');
  writeLn(padR('| Profit/Cost : ' + groupDigits(profitMade, ',') + ' (' + groupDigits(perHour(profitMade, scriptTime.getTime()), ',') + ' hr)', 40) + '|');
  writeLn('|_______________________________________|');

  if players[currentPlayer].booleans[1] then // Smart Proggy
  begin
    smartImage.drawBitmap(paintBitmap, (point(4, 425)));
    smartImage.drawText((msToTime(scriptTime.getTime(), TIME_ABBREV)), Point(413, 441), UpCharsEx, false, clWhite); // Draw time running
    smartImage.drawText(groupDigits(protoMade, ',') + ' planks' + ' (' + groupDigits(perHour(protoMade, scriptTime.getTime()), ',') + ' ph)', Point(413, 480), UpCharsEx, false, 1268443); // Draw how many loads completed
    smartImage.drawText(groupDigits(profitMade, ',') + ' (' + groupDigits(perHour(profitMade, scriptTime.getTime()), ',') + ' hr)', Point(413, 519), UpCharsEx, false, clYellow);
    smartImage.drawText('Version: ' + toStr(VERSION), Point(255, 555), UpCharsEx, false, clGray);
  end
end;

procedure freeStuff();
begin
  freeDTM(logDTM);
  freeBitmaps([PaintBitmap, MillBitmap, PlankBitmap]);
end;

procedure setup();
begin
  clearDebug();
  smartEnableDrawing := true;
  checkForUpdates();
  checkForImages('Scripts\LamaPlankerPics\lamaMillBank.png', 'https://i.imgur.com/povwhzh.png', 'Mill Bitmap');
  checkForImages('Scripts\LamaPlankerPics\lamaProtoProggy.png', 'https://i.imgur.com/s8Y2R2q.png', 'SMART Proggy Image');
  checkForImages('Scripts\LamaPlankerPics\lamaPlankInv.png', 'https://i.imgur.com/abs0cKN.png', 'Plank Bitmap');
  initPlayerForm();
  runPlayerForm();
  if (not playerForm.isScriptReady) then
    terminatescript;
  declarePlayers();
  if (players[currentPlayer].booleans[2]) then
    smartShowConsole := true
  else
    smartShowConsole := false;
  setupSRL();
  if not players[currentPlayer].booleans[3] then
    disableSRLDebug:=true
  else
    disableSRLDebug:=false;
  logPrice := getGEPrice('Mahogany_logs');
  plankPrice := getGEPrice('Mahogany_plank');
  PaintBitmap := loadBitmap(appPath + 'Scripts\LamaPlankerPics\lamaProtoProggy.png');
  MillBitmap := loadBitmap(appPath + 'Scripts\LamaPlankerPics\lamaMillBank.png');
  PlankBitmap := loadBitmap(appPath + 'Scripts\LamaPlankerPics\lamaPlankInv.png');
  logDTM :=  DTMFromString('mrAAAAHic42BgYLjOBMEPgfgZlAbxTwHxSSAOYWRg8IXiMCCOA+JEIE6A8lf3xwNNYcKJuRjwA0YCGAYAHMELUw==');
  chatOne := [107, 577, 173, 595];
  addOnTerminate('freeStuff');
  protoMade := 0;
  planksMade := 0;
  profitMade := 0;
  clearDebug();
end;

procedure mainLoop();
begin
  if not isLoggedIn then
  begin
    if not players[currentPlayer].login() then
      terminateScript;
    writeln('Just logged in... waiting a moment');
    wait(RandomRange(2000, 3750));
  end;
  minimap.clickCompass;
  mainScreen.setAngle(MS_ANGLE_HIGH);
  mainscreen.setZoom(false);
  findNormalRandoms();

  scriptTime.start();
  repeat
    fixMisType();
    if not noMill() and tabBackpack.countDTM(logDTM) >= 1  then
      makePlanks();
    if (chatbox.findTextOnLines(['afford to', 'make that many', 'can''t afford', 'Item could not', 'not be found', 'found: Mahogany logs'], [0..2])) or (noMill() and (not players[currentPlayer].booleans[0])) then
      break;
    proggy();
    doBanking();
  until (scriptTime.getTime() >= (players[currentPlayer].integers[0] * 60000));

  proggy();

  if scriptTime.getTime() >= (players[currentPlayer].integers[0] * 60000) then
    writeLn('Time ran out ...')
  else if (noMill() and (not players[currentPlayer].booleans[0])) then
    writeLn('There is no mill, and you wish not to place one ...')
  else
    writeLn('You ran out of logs or money...');

  writeLn('Exiting to lobby ...');
  players[currentPlayer].exitToLobby();
  writeLn('Completed task ...');
end;

begin
  setup();
  mainLoop();
end.
