program LamaLantadymer;
  {$DEFINE SMART}
  {$i srl-6/srl.simba}
  {$i srl-6/lib/misc/srlplayerform.simba}

const

{ Script Info }
  SCRIPT = 'LamaLantadymer';
  VERSION = ' v1.0';

{ Player Form }
  P_PRESET = 1;
  LOADS_TO_DO = 0;

// Global Variables

var
  loadsDone, profitPerHour, profitMade: integer;
  herbPrice, vialPrice, potPrice, finPrice: integer;
  herbDTM: integer;

procedure initPlayerForm();
begin
  with playerForm do
  begin
    name := 'Lama''s Lantadymer'; // the title of the SPF, usually the name of your script
    scriptHelpThread := '';    // a link to a help thread, if set to '' will link to my setup guide

    editBoxLabels := ['Loads to Do', 'World'];     // edit boxes are created for each array element
    editBoxDefaults := ['0', '0'];             // optional default values for each edit box; array length must equal editBoxLabel length

    // optional hints for each edit box; hints are shown when the user holds the mouse over the component
    editBoxHints := ['How many inventories of dough to make?', 'What world to log on to? (Leave at 0 for random)'];

    checkBoxLabels := ['Text Progress Report', 'Debug SRL', 'Debug SMART']; // same as editBoxLabels but for check boxes
    checkBoxDefaults := ['true', 'false', 'false'];
    checkBoxHints := ['Output the progress report to the debug box?', 'Debug SRL stuff?', 'Want to see colorful boxes on SMART?'];

    comboBoxLabels := ['Bank Preset'];
    comboBoxDefaults := ['1'];
    comboBoxHints := ['Use which of your bank presets?'];

    // this needs to be done for every element in the comboBoxLabels array
    setLength(comboBoxItems, length(comboBoxLabels));
    comboBoxItems[0] := ['1', '2'];

  end;
end;

procedure declarePlayers();
var
  i: integer;
begin
  players.setup(playerForm.playerNames, playerForm.playerFile); // load the SPF players from the SRL Player Manager
  currentPlayer := 0;                // player to use first

  for i := 0 to high(players) do
    with players[i] do
    begin
      // convert the integers
      integers[LOADS_TO_DO] := strToInt(playerForm.players[i].settings[0]);  // Loads to Do

      world := strToInt(playerForm.players[i].settings[1]);
      // booleans
      booleans[0] := strToBool(playerForm.players[i].settings[2]); // Proggy on?
      booleans[1] := strToBool(playerForm.players[i].settings[3]); // Debug SRL
      booleans[2] := strToBool(playerForm.players[i].settings[4]); // Debug SMART

      case playerForm.players[i].settings[5] of                    // Bank Preset
        '1': integers[P_PRESET] := BANK_BUTTON_PRESET_1;
        '2': integers[P_PRESET] := BANK_BUTTON_PRESET_2;
      end;
    end;
end;

procedure loadDTM;
begin
  herbDTM :=  DTMFromString('mrAAAAHic42BgYFjPxMCwDYh3A/EOIF4FxPOBeBkQrwPiMEYGhkAg9gfiSCCOAeJQIPYFYk8g5okwB5rChBODSHyAkQCGAQDd6gjf');
end;

function getGEPrice(itemString: String): Integer;
var
  wikiaPage, priceString: string;

begin
  wikiaPage := getPage('http://runescape.wikia.com/wiki/Exchange:' + itemString);
  priceString := between('GEPrice">', '</span>', wikiaPage);
  result := strToIntDef(extractFromStr(priceString, numbers), -1);
  writeLn('-- ' + itemString + ' price: ' + toStr(result));
end;

{------------------------------------------------------------------------------)
 Function: perHour
 Description: Converts an integer to a 'per hour' amount.
 Credits: Coh3n
(------------------------------------------------------------------------------}

function perHour(amt, time: integer): integer;
begin
  if (amt = -1) then
  begin
    result := -1;
    exit;
  end;

  try
    result := round((amt * 60) / (time / 60000));
  except
  end;
end;

function profit(herbsPerInv: integer): integer;
begin
  result := round(((herbsPerInv * finPrice) - potPrice) * 1.125);
end;

function findNormalRandoms: boolean;  // Exits out of common randoms
begin
  result := exitSquealOfFortune or claimSpinTicket;
end;

procedure antiban();
begin
  case (random(500) + 1) of
    1:
    begin
      boredHuman(true);
      MainScreen.SetAngle(MS_ANGLE_HIGH);
      minimap.setAngle(MM_DIRECTION_NORTH);
    end;
    2..400:
    begin
      mouseSpeed := 40;
      sleepAndMoveMouse(randomRange(100, 500));
      mouseSpeed := 20;
    end;
    401..500:
    begin
      mouseOffClient(random(4));
      wait(gaussRangeInt(0, 10000));
    end;
  end;
end;

procedure bank();
var
  bankBox: TBox;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i: integer;
begin
  bankBox := [309, 174, 342, 205];
  mouseBox(bankBox, MOUSE_MOVE);
  if isMouseOverText(['ank']) then
    fastClick(MOUSE_LEFT);
  wait(random(300) + 400);
  if bankScreen.isOpen(1000) or pinScreen.isOpen(1000) then
  begin
    if pinScreen.isOpen() then
      pinScreen.enter(Players[currentPlayer].bankPin);
    wait(randomRange(500, 750));
    bankScreen.clickButton(players[currentPlayer].integers[P_PRESET]);
    if not bankScreen.isOpen(1000) then
  end;
end;

procedure mixPot();
var
  makeTimer: TTimeMarker;
begin
  if (tabBackpack.count() < 28) then
  begin
    tabBackpack.mouseSlot(1, MOUSE_MOVE);
    if isMouseOverText(['antadym', 'lean']) then
      fastClick(MOUSE_LEFT);
    if not isMouseOverText(['antadym', 'lean']) then
    begin
      writeLn('No Lantadyme left ...');
      players[currentPlayer].exitToLobby();
      terminateScript();;
    end;
    tabBackpack.mouseSlot(2, MOUSE_MOVE);
    if isMouseOverText(['ial of', 'ater']) then
      fastClick(MOUSE_LEFT);
    if not isMouseOverText(['ial of', 'ater']) then
    begin
      writeLn('No water vials left ...');
      players[currentPlayer].exitToLobby();
      terminateScript();
    end;
    if productionScreen.isOpen(1500) then
    begin
      productionScreen.clickStart();
      antiban();
      wait(randomRange(14000, 16000));
      writeLn('Out of materials ... exiting to lobby');
      players[currentPlayer].exitToLobby();
      terminateScript();
    end;
  end;

  tabBackpack.mouseSlot(1, MOUSE_MOVE);
  if isMouseOverText(['antadym', 'lean']) then
    fastClick(MOUSE_LEFT);
  tabBackpack.mouseSlot(2, MOUSE_MOVE);
  if isMouseOverText(['ial of', 'ater']) then
    fastClick(MOUSE_LEFT);

  if productionScreen.isOpen(1500) then
  begin
    productionScreen.clickStart();
    antiban();
    tabBackpack.waitSlotPixelChange(28, 17500)
  end;
end;

procedure proggy();
begin
  clearDebug();

  profitMade := profitMade + profit(tabBackpack.countDTM(herbDTM));

  writeLn('|=====================================|');
  writeLn('         ' + SCRIPT + VERSION + '         ');
  writeLn('                                      ');
  writeLn('  Time Running  : ' + (msToTime(getTimeRunning, TIME_ABBREV)));
  writeLn('  Loads Done    : ' + toStr(loadsDone) + '/' + (toStr(playerForm.players[currentPlayer].settings[0])) + ' loads');
  writeLn('  Approx. Profit: ' + toStr(profitMade));
  writeLn('                                       ');
  writeLn('|=====================================|');
end;

procedure setup();
begin
  clearDebug();
  smartEnableDrawing := true;
  initPlayerForm();
  runPlayerForm();
  declarePlayers();
  if (players[currentPlayer].booleans[2]) then
    smartShowConsole := true
  else
    smartShowConsole := false;
  if (not playerForm.isScriptReady) then
    terminatescript;
  setupSRL();
  if not players[currentPlayer].booleans[1] then
    disableSRLDebug:=true
  else
    disableSRLDebug:=false;
  herbPrice := getGEPrice('Clean_lantadyme');
  vialPrice := getGEPrice('Vial_of_water');
  potPrice := herbPrice + vialPrice;
  finPrice := getGEPrice('Lantadyme_potion_(unf)') - potPrice;

  loadDTM();
  clearDebug();
end;

procedure mainLoop();
begin
  if not isLoggedIn then
  begin
    if not players[currentPlayer].login() then
      terminateScript;
    writeln('Just logged in... waiting a moment');
    wait(RandomRange(2000, 6500));
  end;
  minimap.clickCompass();
  mainScreen.setAngle(MS_ANGLE_HIGH);
  findNormalRandoms();

  profitMade := 0;
  loadsDone := 0;

  repeat
    bank();
    mixPot();
    loadsDone := loadsDone + 1;
    if players[currentPlayer].booleans[1] then
      proggy();
  until loadsDone >= (players[currentPlayer].integers[LOADS_TO_DO]);

  writeLn('Load target met ...');
  proggy();
  writeLn('Logging out ...');
  players[currentPlayer].logout();
end;

begin
  setup();
  mainLoop();
end.
