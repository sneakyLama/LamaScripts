program LamaLeatherer;
  {$DEFINE SMART}
  {$i srl-6/srl.simba}
  {$i srl-6/lib/misc/srlplayerform.simba}

{              SETUP              }
///////////////////////////////////
{          1. Hit RUN             }
{          2. Fill out Form       }
{          3. Start Script        }

const
{ Script Info }
  SCRIPT  = 'LamaLeatherer  v';
  VERSION = 1.1;

{ Player Form }
  P_PRESET      = 1;
  P_LOADS_TO_DO = 0;
  P_HOTK_MAKE   = '7';
  P_BANK_DIR    = 1;

{ Hides }
  HIDE_ROYAL = 0;
  HIDE_BLACK = 1;
  HIDE_RED   = 2;
  HIDE_BLUE  = 3;
  HIDE_GREEN = 4;

{ Hide Webstrings }
  W_HIDE_ROYAL = 'Royal_dragonhide';
  W_HIDE_BLACK = 'Black_dragonhide';
  W_HIDE_RED   = 'Red_dragonhide';
  W_HIDE_BLUE  = 'Blue_dragonhide';
  W_HIDE_GREEN = 'Green_dragonhide';

{ Leather Webstrings }
  W_LEATHER_ROYAL = 'Royal_dragon_leather';
  W_LEATHER_BLACK = 'Black_dragon_leather';
  W_LEATHER_RED   = 'Red_dragon_leather';
  W_LEATHER_BLUE  = 'Blue_dragon_leather';
  W_LEATHER_GREEN = 'Green_dragon_leather';

{ Bank Points }  // Credit: Coh3n
  BANK_NORTH: TPoint = [275, 155];
  BANK_EAST : TPoint = [315, 185];
  BANK_SOUTH: TPoint = [285, 215];
  BANK_WEST : TPoint = [245, 185];

{ Other }
  XP_INV = 435;

var
  loadsDone, xpGained, xpPerHour, hideChoiceInt, paintBitmap: integer;
  hidePrice, leatherPrice, castPrice, castProfit, profitPerHour, profitMade, profitTotal: integer;
  scriptTime, proggyTime: TTimeMarker;
  bankBox: TBox;
  outOfStuff: boolean;
  tanningWhat: string;

//By Olly
function GetGithubPage(const URL: String): String;
var
  NewURL: String;
  p: Integer;
begin
  Result := '';
  p := Pos('.com/', URL);
  if (p = 0) then
    Exit;

  NewURL := Copy(URL, p + Length('.com/'), Length(URL) - p + Length('.com/'));
  Result := GetPage('http://cdn.rawgit.com/' +  Replace(NewURL, 'blob/', '', [rfReplaceAll]));
end;

procedure checkForUpdates(); // Credits: The Mayor
var
  newFile: integer;
  latestScript, newFileName: string;
  onlineVersion: extended;
begin
  writeln('Checking for script updates:');
  onlineVersion := strToFloat(getGithubPage('https://github.com/sneakyLama/LamaScripts/blob/master/lamaleatherer/version.txt'));
  writeLn(' ---> Script version: ' + toStr(VERSION) + ' | Online version: ' + toStr(onlineVersion));

  if onlineVersion > VERSION then
  begin
    writeLn(' ---> Downloading the newer version from Github');
    latestScript := getGithubPage('https://github.com/sneakyLama/LamaScripts/blob/master/lamaleatherer/LamaLeatherer.simba');
    newFileName := scriptPath + 'LamasMakeLeatherer v'+ toStr(onlineVersion) +'.simba';
    newFile := rewriteFile(newFileName, true);

    if not writeFileString(newFile, latestScript) then
    begin
      writeLn(' ---> Fatal error writing to ' + newFileName);
      terminatescript();
    end;

    closeFile(newFile);
    writeLn(' ---> New script downloaded to ' + newFileName);
    writeLn(' ---> Please use the new one instead!');
    writeLn('');
    terminateScript();
  end else
    writeLn(' ---> You have the latest revision.');

  writeLn('');
end;

procedure initPlayerForm();
begin
  with playerForm do
  begin
    name := 'Lama''s Leather Maker'; // the title of the SPF, usually the name of your script
    scriptHelpThread := 'https://villavu.com/forum/showthread.php?t=110893&p=1317511#post1317511';    // a link to a help thread, if set to '' will link to my setup guide

    editBoxLabels := ['Loads to Do', 'World', 'Action Bar Hotkey'];     // edit boxes are created for each array element
    editBoxDefaults := ['0', '0', '7'];             // optional default values for each edit box; array length must equal editBoxLabel length

    editBoxHints := ['How many inventories to do? Leave at 0 to go for as long as possible.', 'What world to log on to? (Leave at 0 for random)', 'Action Bar hotkey bind for make leather spell?'];

    checkBoxLabels := ['SMART Progress', 'Debug SRL', 'Debug SMART']; // same as editBoxLabels but for check boxes
    checkBoxDefaults := ['false', 'false', 'false'];
    checkBoxHints := ['Output the progress report to the debug box?', 'Debug SRL stuff?', 'Want to see colorful boxes on SMART?'];

    comboBoxLabels := ['Bank Preset', 'Bank Direction'];
    comboBoxDefaults := ['1', 'East'];
    comboBoxHints := ['Use which of your bank presets?', 'In relation to the player, which direction is the bank?'];

    // this needs to be done for every element in the comboBoxLabels array
    setLength(comboBoxItems, length(comboBoxLabels));
    comboBoxItems[0] := ['1', '2'];
    comboBoxItems[1] := ['N', 'E', 'S', 'W'];

  end;
end;

procedure declarePlayers();
var
  i: integer;
begin
  players.setup(playerForm.playerNames, playerForm.playerFile); // load the SPF players from the SRL Player Manager
  currentPlayer := 0;                // player to use first

  for i := 0 to high(players) do
    with players[i] do
    begin
      // convert the integers
      integers[P_LOADS_TO_DO] := strToInt(playerForm.players[i].settings[0]);  // Loads to Do
      world := strToInt(playerForm.players[i].settings[1]);                    // World to play on

      strings[P_HOTK_MAKE] := playerForm.players[i].settings[2];   // Spell Actionbar Hotkey
      strings[P_BANK_DIR] := playerForm.players[i].settings[7];    // Bank Direction

      // booleans
      booleans[0] := strToBool(playerForm.players[i].settings[3]); // smart Proggy
      booleans[1] := strToBool(playerForm.players[i].settings[4]); // Debug SRL
      booleans[2] := strToBool(playerForm.players[i].settings[5]); // Debug SMART

      case playerForm.players[i].settings[6] of                    // Bank Preset
        '1': integers[P_PRESET] := BANK_BUTTON_PRESET_1;
        '2': integers[P_PRESET] := BANK_BUTTON_PRESET_2;
      end;
    end;
end;

function getGEPrice(itemString: string): integer;  // Credit: TheMayor
var
  wikiaPage, priceString: string;
begin
  wikiaPage := getPage('http://runescape.wikia.com/wiki/Exchange:' + itemString);
  priceString := between('GEPrice">', '</span>', wikiaPage);
  result := strToIntDef(extractFromStr(priceString, numbers), -1);
  writeLn('-- ' + itemString + ' price: ' + toStr(result));
end;

function perHour(amt, time: integer): integer;  // Credit: Coh3n
begin
  if (amt = -1) then
  begin
    result := -1;
    exit;
  end;

  try
    result := round((amt * 60) / (time / 60000));
  except
  end;
end;

function getBankPoint(bankDir: string): TPoint;  // Credit: Coh3n
begin
  case lowerCase(bankDir) of
    'n': result := BANK_NORTH;
    'e': result := BANK_EAST;
    's': result := BANK_SOUTH;
    'w': result := BANK_WEST;
  else
    writeln('getBankPoint(): ERROR; invalid bank direction for player: ', currentPlayer);
  end;
end;

function findNormalRandoms: boolean;
begin
  result := exitTreasure() or claimTicket();
end;

procedure antiban();
begin
  case (random(500) + 1) of
    1:
    begin
      boredHuman(true);
      MainScreen.SetAngle(MS_ANGLE_HIGH);
      minimap.setAngle(MM_DIRECTION_NORTH);
    end;
    2..400:
    begin
      mouseSpeed := 40;
      sleepAndMoveMouse(randomRange(100, 500));
      mouseSpeed := 20;
    end;
    401..500:
    begin
      mouseOffClient(random(4));
      wait(gaussRangeInt(0, 7500));
    end;
  end;
end;

procedure bank();
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i: integer;
begin
  mouse(getBankPoint(players[currentPlayer].strings[P_BANK_DIR]).rand(15), MOUSE_MOVE);
  if isMouseOverText(['ank', 'hest']) then
    fastClick(MOUSE_LEFT);
  if bankScreen.isOpen(1000) or pinScreen.isOpen(1000) then
  begin
    if pinScreen.isOpen() then
      pinScreen.enter(players[currentPlayer].bankPin);
    wait(randomRange(500, 750));
    bankScreen.clickButton(players[currentPlayer].integers[P_PRESET]);
  end;
  if not bankScreen.isOpen(1000) then
end;

function colorCheck(): boolean; // Temporary (hopefully) workaround for productionScreen.isOpen(1500)
var
  checkBox: TBox;
  checkBoxTPA: TPointArray;
begin
  checkBox := [492, 196, 508, 266];
  checkBoxTPA := checkBox.createTPA();
  if playerForm.players[currentPlayer].booleans[2] then
    smartImage.debugTPA(checkBoxTPA, true);
  result := checkBox.colorExists(4381026, 71)  // Looks for the green check marks next to spell requirements
end;

function isRunes(): boolean;
begin
  result := tabBackpack.isItemInSlot(1) and tabBackpack.isItemInSlot(2);
end;

procedure makeLeather();
var
  astralCount, bodyCount: integer;
begin
  if bankScreen.isOpen(250) then  // Failsafe that shouldn't be necessary... can't find problem yet
  begin
    bankScreen.clickButton(players[currentPlayer].integers[P_PRESET]);
    if not bankScreen.isOpen(1000) then
  end;
  if (tabBackpack.count < 27) or (not isRunes()) then
  begin
    outOfStuff := true;
  end;
  tabBackpack.mouseSlot(randomRange(3, 5), MOUSE_MOVE);
  if isMouseOverText(['ragonhi', 'hide']) then
  begin
    typeSend(players[currentPlayer].strings[P_HOTK_MAKE], false);
    fastClick(MOUSE_LEFT);
  end;
  waitFunc(@colorCheck, 50, 3000); // Temp workaround, see line 196
  productionScreen.clickStart();
  antiban();
  if outOfStuff then
    wait(randomRange(9000, 11000))
  else
    tabBackpack.waitSlotPixelChange(27, 12500);
  wait(randomRange(1950, 2200));
end;

procedure decideHide(); // Could probably throw this stuff into a Type List thingy, gotta learn that soon
begin
  bank();
  tabBackpack.mouseSlot(3, MOUSE_MOVE);
  if isMouseOverText(['ragonhi', 'hide']) then
  begin
    if isMouseOverText(['reen']) then
      begin
        hidePrice := getGEPrice(W_HIDE_GREEN);
        leatherPrice := getGEPrice(W_LEATHER_GREEN);
        hideChoiceInt := 0;
        tanningWhat := 'Green Dragonhide';
      end;
    if isMouseOverText(['lue']) then
      begin
        hidePrice := getGEPrice(W_HIDE_BLUE);
        leatherPrice := getGEPrice(W_LEATHER_BLUE);
        hideChoiceInt := 1;
        tanningWhat := 'Blue Dragonhide';
      end;
    if isMouseOverText(['ed']) then
      begin
        hidePrice := getGEPrice(W_HIDE_RED);
        leatherPrice := getGEPrice(W_LEATHER_RED);
        hideChoiceInt := 2;
        tanningWhat := 'Red Dragonhide';
      end;
    if isMouseOverText(['lack']) then
      begin
        hidePrice := getGEPrice(W_HIDE_BLACK);
        leatherPrice := getGEPrice(W_LEATHER_BLACK);
        hideChoiceInt := 3;
        tanningWhat := 'Black Dragonhide';
      end;
    if isMouseOverText(['oyal']) then
      begin
        hidePrice := getGEPrice(W_HIDE_ROYAL);
        leatherPrice := getGEPrice(W_LEATHER_ROYAL);
        hideChoiceInt := 4;
        tanningWhat := 'Royal Dragonhide';
      end;
  end;
  castPrice := (hidePrice * 5) + (getGEPrice('Astral_rune') * 2) + (getGEPrice('Body_rune') * 2);
  castProfit := (leatherPrice * 5) - castPrice;
  writeLn('-- Using ' + tanningWhat);
end;


procedure proggy();
var
  loadsString: string;
begin
  if proggyTime.getTime() < 20000 then
    exit;
  clearDebug();

  xpGained := loadsDone * XP_INV;
  profitMade := castProfit * 5;
  profitTotal := profitMade * loadsDone;
  if players[currentPlayer].integers[P_LOADS_TO_DO] < 1 then
    loadsString := (' (' + groupDigits(perHour(loadsDone * 25, scriptTime.getTime()), ',') + ')')
  else
    loadsString := (' (' + groupDigits(players[currentPlayer].integers[P_LOADS_TO_DO], ',') + ')');

  writeLn('|=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=|');  // Debug Proggy
  writeLn(padR('|          ' + SCRIPT + toStr(VERSION), 40) + '|');
  writeLn('|=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=|');
  writeLn(padR('| Tanning Hide: ' + tanningWhat, 40) + '|');
  writeLn(padR('| Time Running: ' + (msToTime(scriptTime.getTime(), TIME_ABBREV)), 40) + '|');
  writeLn(padR('| Loads Done  : ' + toStr(loadsDone) + loadsString + ' loads', 40) + '|');
  writeLn(padR('| Profit Made : ' + groupDigits(profitTotal, ',') + ' (' + groupDigits(perHour(profitTotal, scriptTime.getTime()), ',') + ' hr)', 40) + '|');
  writeLn(padR('| XP Gained   : ' + groupDigits(xpGained, ',') + ' (' + groupDigits(perHour(xpGained, scriptTime.getTime()), ',') + ' hr)', 40) + '|');
  writeLn('|_______________________________________|');

  if players[currentPlayer].booleans[0] then // Smart Proggy
  begin
    case hideChoiceInt of
      0: paintBitmap := loadBitmap(appPath + 'Scripts\LamaLeatherProgs\lamaLeatherGreen.png');
      1: paintBitmap := loadBitmap(appPath + 'Scripts\LamaLeatherProgs\lamaLeatherBlue.png');
      2: paintBitmap := loadBitmap(appPath + 'Scripts\LamaLeatherProgs\lamaLeatherRed.png');
      3: paintBitmap := loadBitmap(appPath + 'Scripts\LamaLeatherProgs\lamaLeatherBlack.png');
      4: paintBitmap := loadBitmap(appPath + 'Scripts\LamaLeatherProgs\lamaLeatherRoyal.png');
    end;
    smartImage.drawBitmap(PaintBitmap, (point(4, 425)));
    smartImage.drawText((msToTime(scriptTime.getTime(), TIME_ABBREV)), Point(413, 441), UpCharsEx, false, clWhite); // Draw time running
    smartImage.drawText(groupDigits(loadsDone * 25, ',') + ' Tanned' + ' (' + groupDigits(loadsDone, ',') + ' loads)', Point(413, 480), UpCharsEx, false, 1268443); // Draw how many loads completed
    smartImage.drawText(groupDigits(profitTotal, ',') + ' (' + (groupDigits(perHour(profitTotal, scriptTime.getTime()), ',')) + ' hr)', Point(413, 519), UpCharsEx, false, clYellow);
    smartImage.drawText('Version: ' + toStr(VERSION), Point(255, 555), UpCharsEx, false, clGray);
  end;
  proggyTime.start();
end;

function completedTask(): boolean;
var
  count: integer;
begin
  count := 0;
  if players[currentPlayer].integers[P_LOADS_TO_DO] < 1 then
    count := 1
  else
    count := 0;
  if count > 0 then
    result := outOfStuff
  else
    result := loadsDone >= players[currentPlayer].integers[P_LOADS_TO_DO];
end;

procedure setup();
var
  i: integer;
begin
  clearDebug();
  smartEnableDrawing := true;
  checkForUpdates();
  initPlayerForm();
  runPlayerForm();
  if (not playerForm.isScriptReady) then
    terminatescript;
  declarePlayers();
  if (players[currentPlayer].booleans[2]) then
    smartShowConsole := true
  else
    smartShowConsole := false;
  setupSRL();
  if not players[currentPlayer].booleans[1] then
    disableSRLDebug:=true
  else
    disableSRLDebug:=false;
  clearDebug();
end;

procedure mainLoop();
begin
  if not isLoggedIn then
  begin
    if not players[currentPlayer].login() then
      terminateScript;
    writeln('Just logged in... waiting a moment');
    wait(RandomRange(2000, 4750));
  end;
  minimap.clickCompass();
  mainScreen.setAngle(MS_ANGLE_HIGH);
  findNormalRandoms();

  xpGained := 0;
  profitTotal := 0;
  loadsDone := 0;

  scriptTime.start();
  repeat
    if loadsDone <= 0 then
      decideHide()
    else
      bank();
    makeLeather();
    loadsDone := loadsDone + 1;
    proggy();
  until completedTask() or ((loadsDone <= players[currentPlayer].integers[P_LOADS_TO_DO]) and outOfStuff);

  if outOfStuff then
    writeLn('Ran out of materials ...')
  else
    writeLn('Completed task ...');
  proggy();
  writeLn('Exiting to lobby ...');
  players[currentPlayer].exitToLobby();
end;

begin
  setup();
  mainLoop();
end.
